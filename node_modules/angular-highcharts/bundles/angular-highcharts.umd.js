(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('highcharts'), require('rxjs'), require('@angular/core'), require('highcharts/highmaps'), require('highcharts/highstock'), require('highcharts/highcharts-gantt')) :
    typeof define === 'function' && define.amd ? define('angular-highcharts', ['exports', 'highcharts', 'rxjs', '@angular/core', 'highcharts/highmaps', 'highcharts/highstock', 'highcharts/highcharts-gantt'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['angular-highcharts'] = {}, global.Highcharts, global.rxjs, global.ng.core, global.Highmaps, global.Highstock, global.HighchartsGantt));
}(this, (function (exports, Highcharts, rxjs, core, Highmaps, Highstock, Highcharts$1) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var Highcharts__namespace = /*#__PURE__*/_interopNamespace(Highcharts);
    var Highmaps__namespace = /*#__PURE__*/_interopNamespace(Highmaps);
    var Highstock__namespace = /*#__PURE__*/_interopNamespace(Highstock);
    var Highcharts__namespace$1 = /*#__PURE__*/_interopNamespace(Highcharts$1);

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/chart.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Chart = /** @class */ (function () {
        /**
         * @param {?=} options
         */
        function Chart(options) {
            if (options === void 0) { options = { series: [] }; }
            this.options = options;
            this.refSubject = new rxjs.AsyncSubject();
            this.ref$ = this.refSubject.asObservable();
        }
        /**
         * Add Point
         * @param {?} point         Highcharts.DataPoint, number touple or number
         * @param {?=} serieIndex    Index position of series. This defaults to 0.
         * @param {?=} redraw        Flag whether or not to redraw point. This defaults to true.
         * @param {?=} shift         Shift point to the start of series. This defaults to false.
         * @return {?}
         */
        Chart.prototype.addPoint = function (point, serieIndex, redraw, shift) {
            if (serieIndex === void 0) { serieIndex = 0; }
            if (redraw === void 0) { redraw = true; }
            if (shift === void 0) { shift = false; }
            this.ref$.subscribe(( /**
             * @param {?} chart
             * @return {?}
             */function (/**
             * @param {?} chart
             * @return {?}
             */ chart) {
                if (chart.series.length > serieIndex) {
                    chart.series[serieIndex].addPoint(point, redraw, shift);
                }
            }));
        };
        /**
         * Add Series
         * @param {?} series        Series Configuration
         * @param {?=} redraw        Flag whether or not to redraw series. This defaults to true.
         * @param {?=} animation     Whether to apply animation, and optionally animation configuration. This defaults to false.
         * @return {?}
         */
        Chart.prototype.addSeries = function (series, redraw, animation) {
            if (redraw === void 0) { redraw = true; }
            this.ref$.subscribe(( /**
             * @param {?} chart
             * @return {?}
             */function (/**
             * @param {?} chart
             * @return {?}
             */ chart) {
                chart.addSeries(series, redraw, animation);
            }));
        };
        /**
         * Remove Point
         * @param {?} pointIndex    Index of Point
         * @param {?=} serieIndex    Specified Index of Series. Defaults to 0.
         * @return {?}
         */
        Chart.prototype.removePoint = function (pointIndex, serieIndex) {
            if (serieIndex === void 0) { serieIndex = 0; }
            this.ref$.subscribe(( /**
             * @param {?} chart
             * @return {?}
             */function (/**
             * @param {?} chart
             * @return {?}
             */ chart) {
                if (chart.series.length > serieIndex && chart.series[serieIndex].data.length > pointIndex) {
                    chart.series[serieIndex].removePoint(pointIndex, true);
                }
            }));
        };
        /**
         * Remove Series
         * @param {?} seriesIndex    Index position of series to remove.
         * @return {?}
         */
        Chart.prototype.removeSeries = function (seriesIndex) {
            this.ref$.subscribe(( /**
             * @param {?} chart
             * @return {?}
             */function (/**
             * @param {?} chart
             * @return {?}
             */ chart) {
                if (chart.series.length > seriesIndex) {
                    chart.series[seriesIndex].remove(true);
                }
            }));
        };
        /**
         * @param {?} el
         * @return {?}
         */
        Chart.prototype.init = function (el) {
            var _this = this;
            if (!this.ref) {
                Highcharts.chart(el.nativeElement, this.options, ( /**
                 * @param {?} chart
                 * @return {?}
                 */function (/**
                 * @param {?} chart
                 * @return {?}
                 */ chart) {
                    if (!_this.ref) { // TODO: workaround for doubled callbacks on exporting charts: issue #238
                        _this.refSubject.next(chart);
                        _this.ref = chart;
                        _this.refSubject.complete();
                    }
                }));
            }
        };
        /**
         * @return {?}
         */
        Chart.prototype.destroy = function () {
            if (this.ref) {
                this.options = this.ref.options;
                this.ref.destroy();
                this.ref = undefined;
                // new init subject
                this.refSubject = new rxjs.AsyncSubject();
                this.ref$ = this.refSubject.asObservable();
            }
        };
        return Chart;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        Chart.prototype.refSubject;
        /** @type {?} */
        Chart.prototype.ref$;
        /** @type {?} */
        Chart.prototype.ref;
        /**
         * @type {?}
         * @private
         */
        Chart.prototype.options;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/mapchart.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Felix Itzenplitz. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at
     * https://github.com/cebor/angular-highcharts/blob/master/LICENSE
     */
    var MapChart = /** @class */ (function () {
        /**
         * @param {?=} options
         */
        function MapChart(options) {
            if (options === void 0) { options = { series: [] }; }
            this.options = options;
            this.refSubject = new rxjs.AsyncSubject();
            this.ref$ = this.refSubject.asObservable();
        }
        /**
         * @param {?} el
         * @return {?}
         */
        MapChart.prototype.init = function (el) {
            var _this = this;
            if (!this.ref) {
                Highmaps.mapChart(el.nativeElement, this.options, ( /**
                 * @param {?} chart
                 * @return {?}
                 */function (/**
                 * @param {?} chart
                 * @return {?}
                 */ chart) {
                    if (!_this.ref) { // TODO: workaround for doubled callbacks on exporting charts: issue #238
                        _this.refSubject.next(chart);
                        _this.ref = chart;
                        _this.refSubject.complete();
                    }
                }));
            }
        };
        /**
         * @return {?}
         */
        MapChart.prototype.destroy = function () {
            if (this.ref) {
                this.options = this.ref.options;
                this.ref.destroy();
                this.ref = undefined;
                // new init subject
                this.refSubject = new rxjs.AsyncSubject();
                this.ref$ = this.refSubject.asObservable();
            }
        };
        return MapChart;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        MapChart.prototype.refSubject;
        /** @type {?} */
        MapChart.prototype.ref$;
        /** @type {?} */
        MapChart.prototype.ref;
        /**
         * @type {?}
         * @private
         */
        MapChart.prototype.options;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/stockchart.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Felix Itzenplitz. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at
     * https://github.com/cebor/angular-highcharts/blob/master/LICENSE
     *
     * @author Felix Itzenplitz
     * @author Timothy A. Perez (contributor)
     */
    var StockChart = /** @class */ (function () {
        /**
         * @param {?=} options
         */
        function StockChart(options) {
            if (options === void 0) { options = { series: [] }; }
            this.options = options;
            this.refSubject = new rxjs.AsyncSubject();
            this.ref$ = this.refSubject.asObservable();
        }
        /**
         * @param {?} el
         * @return {?}
         */
        StockChart.prototype.init = function (el) {
            var _this = this;
            if (!this.ref) {
                Highstock.stockChart(el.nativeElement, this.options, ( /**
                 * @param {?} chart
                 * @return {?}
                 */function (/**
                 * @param {?} chart
                 * @return {?}
                 */ chart) {
                    if (!_this.ref) { // TODO: workaround for doubled callbacks on exporting charts: issue #238
                        _this.refSubject.next(chart);
                        _this.ref = chart;
                        _this.refSubject.complete();
                    }
                }));
            }
        };
        /**
         * @return {?}
         */
        StockChart.prototype.destroy = function () {
            if (this.ref) {
                this.options = this.ref.options;
                this.ref.destroy();
                this.ref = undefined;
                // new init subject
                this.refSubject = new rxjs.AsyncSubject();
                this.ref$ = this.refSubject.asObservable();
            }
        };
        return StockChart;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        StockChart.prototype.refSubject;
        /** @type {?} */
        StockChart.prototype.ref$;
        /** @type {?} */
        StockChart.prototype.ref;
        /**
         * @type {?}
         * @private
         */
        StockChart.prototype.options;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/highcharts-gantt.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Felix Itzenplitz. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at
     * https://github.com/cebor/angular-highcharts/blob/master/LICENSE
     */
    var HighchartsGantt = /** @class */ (function () {
        /**
         * @param {?=} options
         */
        function HighchartsGantt(options) {
            if (options === void 0) { options = { series: [] }; }
            this.options = options;
            this.refSubject = new rxjs.AsyncSubject();
            this.ref$ = this.refSubject.asObservable();
        }
        /**
         * @param {?} el
         * @return {?}
         */
        HighchartsGantt.prototype.init = function (el) {
            var _this = this;
            if (!this.ref) {
                Highcharts$1.ganttChart(el.nativeElement, this.options, ( /**
                 * @param {?} chart
                 * @return {?}
                 */function (/**
                 * @param {?} chart
                 * @return {?}
                 */ chart) {
                    if (!_this.ref) { // TODO: workaround for doubled callbacks on exporting charts: issue #238
                        _this.refSubject.next(chart);
                        _this.ref = chart;
                        _this.refSubject.complete();
                    }
                }));
            }
        };
        /**
         * @return {?}
         */
        HighchartsGantt.prototype.destroy = function () {
            if (this.ref) {
                this.options = this.ref.options;
                this.ref.destroy();
                this.ref = undefined;
                // new init subject
                this.refSubject = new rxjs.AsyncSubject();
                this.ref$ = this.refSubject.asObservable();
            }
        };
        return HighchartsGantt;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        HighchartsGantt.prototype.refSubject;
        /** @type {?} */
        HighchartsGantt.prototype.ref$;
        /** @type {?} */
        HighchartsGantt.prototype.ref;
        /**
         * @type {?}
         * @private
         */
        HighchartsGantt.prototype.options;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/chart.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ChartDirective = /** @class */ (function () {
        /**
         * @param {?} el
         */
        function ChartDirective(el) {
            this.el = el;
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        ChartDirective.prototype.ngOnChanges = function (changes) {
            if (!changes.chart.isFirstChange()) {
                this.destroy();
                this.init();
            }
        };
        /**
         * @return {?}
         */
        ChartDirective.prototype.ngOnInit = function () {
            this.init();
        };
        /**
         * @return {?}
         */
        ChartDirective.prototype.ngOnDestroy = function () {
            this.destroy();
        };
        /**
         * @private
         * @return {?}
         */
        ChartDirective.prototype.init = function () {
            if (this.chart instanceof Chart || this.chart instanceof StockChart || this.chart instanceof MapChart
                || this.chart instanceof HighchartsGantt) {
                this.chart.init(this.el);
            }
        };
        /**
         * @private
         * @return {?}
         */
        ChartDirective.prototype.destroy = function () {
            if (this.chart instanceof Chart || this.chart instanceof StockChart || this.chart instanceof MapChart
                || this.chart instanceof HighchartsGantt) {
                this.chart.destroy();
            }
        };
        return ChartDirective;
    }());
    ChartDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[chart]'
                },] }
    ];
    /** @nocollapse */
    ChartDirective.ctorParameters = function () { return [
        { type: core.ElementRef }
    ]; };
    ChartDirective.propDecorators = {
        chart: [{ type: core.Input }]
    };
    if (false) {
        /** @type {?} */
        ChartDirective.prototype.chart;
        /**
         * @type {?}
         * @private
         */
        ChartDirective.prototype.el;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/chart.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var HIGHCHARTS_MODULES = new core.InjectionToken('HighchartsModules');
    var ChartService = /** @class */ (function () {
        /**
         * @param {?} chartModules
         */
        function ChartService(chartModules) {
            this.chartModules = chartModules;
        }
        /**
         * @return {?}
         */
        ChartService.prototype.initModules = function () {
            this.chartModules.forEach(( /**
             * @param {?} chartModule
             * @return {?}
             */function (/**
             * @param {?} chartModule
             * @return {?}
             */ chartModule) {
                [Highcharts__namespace, Highstock__namespace, Highmaps__namespace, Highcharts__namespace$1].forEach(chartModule);
            }));
        };
        return ChartService;
    }());
    ChartService.decorators = [
        { type: core.Injectable }
    ];
    /** @nocollapse */
    ChartService.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: core.Inject, args: [HIGHCHARTS_MODULES,] }] }
    ]; };
    if (false) {
        /**
         * @type {?}
         * @private
         */
        ChartService.prototype.chartModules;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/chart.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0 = [];
    var ChartModule = /** @class */ (function () {
        /**
         * @param {?} cs
         */
        function ChartModule(cs) {
            this.cs = cs;
            this.cs.initModules();
        }
        return ChartModule;
    }());
    ChartModule.decorators = [
        { type: core.NgModule, args: [{
                    exports: [ChartDirective],
                    declarations: [ChartDirective],
                    providers: [
                        { provide: HIGHCHARTS_MODULES, useValue: ɵ0 },
                        ChartService
                    ]
                },] }
    ];
    /** @nocollapse */
    ChartModule.ctorParameters = function () { return [
        { type: ChartService }
    ]; };
    if (false) {
        /**
         * @type {?}
         * @private
         */
        ChartModule.prototype.cs;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: public-api.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * Generated from: angular-highcharts.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.Chart = Chart;
    exports.ChartDirective = ChartDirective;
    exports.ChartModule = ChartModule;
    exports.HIGHCHARTS_MODULES = HIGHCHARTS_MODULES;
    exports.HighchartsGantt = HighchartsGantt;
    exports.MapChart = MapChart;
    exports.StockChart = StockChart;
    exports.ɵa = ChartService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=angular-highcharts.umd.js.map
