/**
 * @fileoverview added by tsickle
 * Generated from: lib/chart.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Felix Itzenplitz. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at
 * https://github.com/cebor/angular-highcharts/blob/master/LICENSE
 */
import { Inject, Injectable, InjectionToken } from '@angular/core';
import * as Highcharts from 'highcharts';
import * as Highstock from 'highcharts/highstock';
import * as Highmaps from 'highcharts/highmaps';
import * as Highcharts_Gnatt from 'highcharts/highcharts-gantt';
/** @type {?} */
export let HIGHCHARTS_MODULES = new InjectionToken('HighchartsModules');
export class ChartService {
    /**
     * @param {?} chartModules
     */
    constructor(chartModules) {
        this.chartModules = chartModules;
    }
    /**
     * @return {?}
     */
    initModules() {
        this.chartModules.forEach((/**
         * @param {?} chartModule
         * @return {?}
         */
        chartModule => {
            [Highcharts, Highstock, Highmaps, Highcharts_Gnatt].forEach(chartModule);
        }));
    }
}
ChartService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ChartService.ctorParameters = () => [
    { type: Array, decorators: [{ type: Inject, args: [HIGHCHARTS_MODULES,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ChartService.prototype.chartModules;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyLWhpZ2hjaGFydHMvc3JjLyIsInNvdXJjZXMiOlsibGliL2NoYXJ0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQVFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRSxPQUFPLEtBQUssVUFBVSxNQUFNLFlBQVksQ0FBQztBQUN6QyxPQUFPLEtBQUssU0FBUyxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sS0FBSyxRQUFRLE1BQU0scUJBQXFCLENBQUM7QUFDaEQsT0FBTyxLQUFLLGdCQUFnQixNQUFNLDZCQUE2QixDQUFDOztBQUVoRSxNQUFNLEtBQUssa0JBQWtCLEdBQUcsSUFBSSxjQUFjLENBQVEsbUJBQW1CLENBQUM7QUFHOUUsTUFBTSxPQUFPLFlBQVk7Ozs7SUFDdkIsWUFBZ0QsWUFBbUI7UUFBbkIsaUJBQVksR0FBWixZQUFZLENBQU87SUFBSSxDQUFDOzs7O0lBRXhFLFdBQVc7UUFDVCxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU87Ozs7UUFBQyxXQUFXLENBQUMsRUFBRTtZQUN0QyxDQUFDLFVBQVUsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzNFLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7O1lBUkYsVUFBVTs7Ozt3Q0FFSSxNQUFNLFNBQUMsa0JBQWtCOzs7Ozs7O0lBQTFCLG9DQUF1RCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBGZWxpeCBJdHplbnBsaXR6LiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0XG4gKiBodHRwczovL2dpdGh1Yi5jb20vY2Vib3IvYW5ndWxhci1oaWdoY2hhcnRzL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMgSGlnaGNoYXJ0cyBmcm9tICdoaWdoY2hhcnRzJztcbmltcG9ydCAqIGFzIEhpZ2hzdG9jayBmcm9tICdoaWdoY2hhcnRzL2hpZ2hzdG9jayc7XG5pbXBvcnQgKiBhcyBIaWdobWFwcyBmcm9tICdoaWdoY2hhcnRzL2hpZ2htYXBzJztcbmltcG9ydCAqIGFzIEhpZ2hjaGFydHNfR25hdHQgZnJvbSAnaGlnaGNoYXJ0cy9oaWdoY2hhcnRzLWdhbnR0JztcblxuZXhwb3J0IGxldCBISUdIQ0hBUlRTX01PRFVMRVMgPSBuZXcgSW5qZWN0aW9uVG9rZW48YW55W10+KCdIaWdoY2hhcnRzTW9kdWxlcycpO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ2hhcnRTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoQEluamVjdChISUdIQ0hBUlRTX01PRFVMRVMpIHByaXZhdGUgY2hhcnRNb2R1bGVzOiBhbnlbXSkgeyB9XG5cbiAgaW5pdE1vZHVsZXMoKSB7XG4gICAgdGhpcy5jaGFydE1vZHVsZXMuZm9yRWFjaChjaGFydE1vZHVsZSA9PiB7XG4gICAgICBbSGlnaGNoYXJ0cywgSGlnaHN0b2NrLCBIaWdobWFwcywgSGlnaGNoYXJ0c19HbmF0dF0uZm9yRWFjaChjaGFydE1vZHVsZSk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==