{"version":3,"sources":["node_modules/@ionic/core/dist/esm/ion-route_4.entry.js"],"names":[],"mappings":"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","sourcesContent":["import { r as registerInstance, e as createEvent, i as getElement, h, H as Host } from './index-7a8b7a1c.js';\nimport { c as componentOnReady, n as debounce } from './helpers-dd7e4b7b.js';\nimport { b as getIonMode } from './ionic-global-63a97a32.js';\nimport { o as openURL, c as createColorClasses } from './theme-ff3fc52f.js';\n\nconst Route = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteDataChanged = createEvent(this, \"ionRouteDataChanged\", 7);\n    /**\n     * Relative path that needs to match in order for this route to apply.\n     *\n     * Accepts paths similar to expressjs so that you can define parameters\n     * in the url /foo/:bar where bar would be available in incoming props.\n     */\n    this.url = '';\n  }\n  onUpdate(newValue) {\n    this.ionRouteDataChanged.emit(newValue);\n  }\n  onComponentProps(newValue, oldValue) {\n    if (newValue === oldValue) {\n      return;\n    }\n    const keys1 = newValue ? Object.keys(newValue) : [];\n    const keys2 = oldValue ? Object.keys(oldValue) : [];\n    if (keys1.length !== keys2.length) {\n      this.onUpdate(newValue);\n      return;\n    }\n    for (const key of keys1) {\n      if (newValue[key] !== oldValue[key]) {\n        this.onUpdate(newValue);\n        return;\n      }\n    }\n  }\n  connectedCallback() {\n    this.ionRouteDataChanged.emit();\n  }\n  static get watchers() { return {\n    \"url\": [\"onUpdate\"],\n    \"component\": [\"onUpdate\"],\n    \"componentProps\": [\"onComponentProps\"]\n  }; }\n};\n\nconst RouteRedirect = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteRedirectChanged = createEvent(this, \"ionRouteRedirectChanged\", 7);\n  }\n  propDidChange() {\n    this.ionRouteRedirectChanged.emit();\n  }\n  connectedCallback() {\n    this.ionRouteRedirectChanged.emit();\n  }\n  static get watchers() { return {\n    \"from\": [\"propDidChange\"],\n    \"to\": [\"propDidChange\"]\n  }; }\n};\n\nconst ROUTER_INTENT_NONE = 'root';\nconst ROUTER_INTENT_FORWARD = 'forward';\nconst ROUTER_INTENT_BACK = 'back';\n\n// Join the non empty segments with \"/\".\nconst generatePath = (segments) => {\n  const path = segments\n    .filter(s => s.length > 0)\n    .join('/');\n  return '/' + path;\n};\nconst generateUrl = (segments, useHash, queryString) => {\n  let url = generatePath(segments);\n  if (useHash) {\n    url = '#' + url;\n  }\n  if (queryString !== undefined) {\n    url += '?' + queryString;\n  }\n  return url;\n};\nconst writePath = (history, root, useHash, path, direction, state, queryString) => {\n  const url = generateUrl([...parsePath(root).segments, ...path], useHash, queryString);\n  if (direction === ROUTER_INTENT_FORWARD) {\n    history.pushState(state, '', url);\n  }\n  else {\n    history.replaceState(state, '', url);\n  }\n};\nconst chainToPath = (chain) => {\n  const path = [];\n  for (const route of chain) {\n    for (const segment of route.path) {\n      if (segment[0] === ':') {\n        const param = route.params && route.params[segment.slice(1)];\n        if (!param) {\n          return null;\n        }\n        path.push(param);\n      }\n      else if (segment !== '') {\n        path.push(segment);\n      }\n    }\n  }\n  return path;\n};\n// Remove the prefix segments from the path segments.\n//\n// Return:\n// - null when the path segments do not start with the passed prefix,\n// - the path segments after the prefix otherwise.\nconst removePrefix = (prefix, path) => {\n  if (prefix.length > path.length) {\n    return null;\n  }\n  if (prefix.length <= 1 && prefix[0] === '') {\n    return path;\n  }\n  for (let i = 0; i < prefix.length; i++) {\n    if (prefix[i] !== path[i]) {\n      return null;\n    }\n  }\n  if (path.length === prefix.length) {\n    return [''];\n  }\n  return path.slice(prefix.length);\n};\nconst readPath = (loc, root, useHash) => {\n  const prefix = parsePath(root).segments;\n  const pathname = useHash ? loc.hash.slice(1) : loc.pathname;\n  const path = parsePath(pathname).segments;\n  return removePrefix(prefix, path);\n};\n// Parses the path to:\n// - segments an array of '/' separated parts,\n// - queryString (undefined when no query string).\nconst parsePath = (path) => {\n  let segments = [''];\n  let queryString;\n  if (path != null) {\n    const qsStart = path.indexOf('?');\n    if (qsStart > -1) {\n      queryString = path.substr(qsStart + 1);\n      path = path.substr(0, qsStart);\n    }\n    segments = path.split('/')\n      .map(s => s.trim())\n      .filter(s => s.length > 0);\n    if (segments.length === 0) {\n      segments = [''];\n    }\n  }\n  return { segments, queryString };\n};\n\nconst printRoutes = (routes) => {\n  console.group(`[ion-core] ROUTES[${routes.length}]`);\n  for (const chain of routes) {\n    const path = [];\n    chain.forEach(r => path.push(...r.path));\n    const ids = chain.map(r => r.id);\n    console.debug(`%c ${generatePath(path)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\n  }\n  console.groupEnd();\n};\nconst printRedirects = (redirects) => {\n  console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\n  for (const redirect of redirects) {\n    if (redirect.to) {\n      console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to.segments)}`, 'font-weight: bold');\n    }\n  }\n  console.groupEnd();\n};\n\nconst writeNavState = async (root, chain, direction, index, changed = false, animation) => {\n  try {\n    // find next navigation outlet in the DOM\n    const outlet = searchNavNode(root);\n    // make sure we can continue interacting the DOM, otherwise abort\n    if (index >= chain.length || !outlet) {\n      return changed;\n    }\n    await new Promise(resolve => componentOnReady(outlet, resolve));\n    const route = chain[index];\n    const result = await outlet.setRouteId(route.id, route.params, direction, animation);\n    // if the outlet changed the page, reset navigation to neutral (no direction)\n    // this means nested outlets will not animate\n    if (result.changed) {\n      direction = ROUTER_INTENT_NONE;\n      changed = true;\n    }\n    // recursively set nested outlets\n    changed = await writeNavState(result.element, chain, direction, index + 1, changed, animation);\n    // once all nested outlets are visible let's make the parent visible too,\n    // using markVisible prevents flickering\n    if (result.markVisible) {\n      await result.markVisible();\n    }\n    return changed;\n  }\n  catch (e) {\n    console.error(e);\n    return false;\n  }\n};\nconst readNavState = async (root) => {\n  const ids = [];\n  let outlet;\n  let node = root;\n  // tslint:disable-next-line:no-constant-condition\n  while (true) {\n    outlet = searchNavNode(node);\n    if (outlet) {\n      const id = await outlet.getRouteId();\n      if (id) {\n        node = id.element;\n        id.element = undefined;\n        ids.push(id);\n      }\n      else {\n        break;\n      }\n    }\n    else {\n      break;\n    }\n  }\n  return { ids, outlet };\n};\nconst waitUntilNavNode = () => {\n  if (searchNavNode(document.body)) {\n    return Promise.resolve();\n  }\n  return new Promise(resolve => {\n    window.addEventListener('ionNavWillLoad', resolve, { once: true });\n  });\n};\nconst QUERY = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\nconst searchNavNode = (root) => {\n  if (!root) {\n    return undefined;\n  }\n  if (root.matches(QUERY)) {\n    return root;\n  }\n  const outlet = root.querySelector(QUERY);\n  return outlet !== null && outlet !== void 0 ? outlet : undefined;\n};\n\n// Returns whether the given redirect matches the given path segments.\n//\n// A redirect matches when the segments of the path and redirect.from are equal.\n// Note that segments are only checked until redirect.from contains a '*' which matches any path segment.\n// The path ['some', 'path', 'to', 'page'] matches both ['some', 'path', 'to', 'page'] and ['some', 'path', '*'].\nconst matchesRedirect = (path, redirect) => {\n  const { from, to } = redirect;\n  if (to === undefined) {\n    return false;\n  }\n  if (from.length > path.length) {\n    return false;\n  }\n  for (let i = 0; i < from.length; i++) {\n    const expected = from[i];\n    if (expected === '*') {\n      return true;\n    }\n    if (expected !== path[i]) {\n      return false;\n    }\n  }\n  return from.length === path.length;\n};\n// Returns the first redirect matching the path segments or undefined when no match found.\nconst findRouteRedirect = (path, redirects) => {\n  return redirects.find(redirect => matchesRedirect(path, redirect));\n};\nconst matchesIDs = (ids, chain) => {\n  const len = Math.min(ids.length, chain.length);\n  let score = 0;\n  for (let i = 0; i < len; i++) {\n    const routeId = ids[i];\n    const routeChain = chain[i];\n    // Skip results where the route id does not match the chain at the same index\n    if (routeId.id.toLowerCase() !== routeChain.id) {\n      break;\n    }\n    if (routeId.params) {\n      const routeIdParams = Object.keys(routeId.params);\n      /**\n       * Only compare routes with the chain that have the same number of parameters.\n       */\n      if (routeIdParams.length === routeChain.path.length) {\n        /**\n         * Maps the route's params into a path based on the path variable names,\n         * to compare against the route chain format.\n         *\n         * Before:\n         * ```ts\n         * {\n         *  params: {\n         *    s1: 'a',\n         *    s2: 'b'\n         *  }\n         * }\n         * ```\n         *\n         * After:\n         * ```ts\n         * [':s1',':s2']\n         * ```\n         */\n        const pathWithParams = routeIdParams.map(key => `:${key}`);\n        for (let j = 0; j < pathWithParams.length; j++) {\n          // Skip results where the path variable is not a match\n          if (pathWithParams[j].toLowerCase() !== routeChain.path[j]) {\n            break;\n          }\n          // Weight path matches for the same index higher.\n          score++;\n        }\n      }\n    }\n    // Weight id matches\n    score++;\n  }\n  return score;\n};\nconst matchesPath = (inputPath, chain) => {\n  const segments = new RouterSegments(inputPath);\n  let matchesDefault = false;\n  let allparams;\n  for (let i = 0; i < chain.length; i++) {\n    const path = chain[i].path;\n    if (path[0] === '') {\n      matchesDefault = true;\n    }\n    else {\n      for (const segment of path) {\n        const data = segments.next();\n        // data param\n        if (segment[0] === ':') {\n          if (data === '') {\n            return null;\n          }\n          allparams = allparams || [];\n          const params = allparams[i] || (allparams[i] = {});\n          params[segment.slice(1)] = data;\n        }\n        else if (data !== segment) {\n          return null;\n        }\n      }\n      matchesDefault = false;\n    }\n  }\n  const matches = (matchesDefault)\n    ? matchesDefault === (segments.next() === '')\n    : true;\n  if (!matches) {\n    return null;\n  }\n  if (allparams) {\n    return chain.map((route, i) => ({\n      id: route.id,\n      path: route.path,\n      params: mergeParams(route.params, allparams[i]),\n      beforeEnter: route.beforeEnter,\n      beforeLeave: route.beforeLeave\n    }));\n  }\n  return chain;\n};\n// Merges the route parameter objects.\n// Returns undefined when both parameters are undefined.\nconst mergeParams = (a, b) => {\n  return a || b ? Object.assign(Object.assign({}, a), b) : undefined;\n};\nconst routerIDsToChain = (ids, chains) => {\n  let match = null;\n  let maxMatches = 0;\n  for (const chain of chains) {\n    const score = matchesIDs(ids, chain);\n    if (score > maxMatches) {\n      match = chain;\n      maxMatches = score;\n    }\n  }\n  if (match) {\n    return match.map((route, i) => ({\n      id: route.id,\n      path: route.path,\n      params: mergeParams(route.params, ids[i] && ids[i].params)\n    }));\n  }\n  return null;\n};\nconst routerPathToChain = (path, chains) => {\n  let match = null;\n  let matches = 0;\n  for (const chain of chains) {\n    const matchedChain = matchesPath(path, chain);\n    if (matchedChain !== null) {\n      const score = computePriority(matchedChain);\n      if (score > matches) {\n        matches = score;\n        match = matchedChain;\n      }\n    }\n  }\n  return match;\n};\nconst computePriority = (chain) => {\n  let score = 1;\n  let level = 1;\n  for (const route of chain) {\n    for (const path of route.path) {\n      if (path[0] === ':') {\n        score += Math.pow(1, level);\n      }\n      else if (path !== '') {\n        score += Math.pow(2, level);\n      }\n      level++;\n    }\n  }\n  return score;\n};\nclass RouterSegments {\n  constructor(path) {\n    this.path = path.slice();\n  }\n  next() {\n    if (this.path.length > 0) {\n      return this.path.shift();\n    }\n    return '';\n  }\n}\n\nconst readProp = (el, prop) => {\n  if (prop in el) {\n    return el[prop];\n  }\n  if (el.hasAttribute(prop)) {\n    return el.getAttribute(prop);\n  }\n  return null;\n};\nconst readRedirects = (root) => {\n  return Array.from(root.children)\n    .filter(el => el.tagName === 'ION-ROUTE-REDIRECT')\n    .map(el => {\n    const to = readProp(el, 'to');\n    return {\n      from: parsePath(readProp(el, 'from')).segments,\n      to: to == null ? undefined : parsePath(to),\n    };\n  });\n};\nconst readRoutes = (root) => {\n  return flattenRouterTree(readRouteNodes(root));\n};\nconst readRouteNodes = (node) => {\n  return Array.from(node.children)\n    .filter(el => el.tagName === 'ION-ROUTE' && el.component)\n    .map(el => {\n    const component = readProp(el, 'component');\n    return {\n      path: parsePath(readProp(el, 'url')).segments,\n      id: component.toLowerCase(),\n      params: el.componentProps,\n      beforeLeave: el.beforeLeave,\n      beforeEnter: el.beforeEnter,\n      children: readRouteNodes(el)\n    };\n  });\n};\nconst flattenRouterTree = (nodes) => {\n  const chains = [];\n  for (const node of nodes) {\n    flattenNode([], chains, node);\n  }\n  return chains;\n};\nconst flattenNode = (chain, chains, node) => {\n  chain = chain.slice();\n  chain.push({\n    id: node.id,\n    path: node.path,\n    params: node.params,\n    beforeLeave: node.beforeLeave,\n    beforeEnter: node.beforeEnter\n  });\n  if (node.children.length === 0) {\n    chains.push(chain);\n    return;\n  }\n  for (const child of node.children) {\n    flattenNode(chain, chains, child);\n  }\n};\n\nconst Router = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteWillChange = createEvent(this, \"ionRouteWillChange\", 7);\n    this.ionRouteDidChange = createEvent(this, \"ionRouteDidChange\", 7);\n    this.previousPath = null;\n    this.busy = false;\n    this.state = 0;\n    this.lastState = 0;\n    /**\n     * The root path to use when matching URLs. By default, this is set to \"/\", but you can specify\n     * an alternate prefix for all URL paths.\n     */\n    this.root = '/';\n    /**\n     * The router can work in two \"modes\":\n     * - With hash: `/index.html#/path/to/page`\n     * - Without hash: `/path/to/page`\n     *\n     * Using one or another might depend in the requirements of your app and/or where it's deployed.\n     *\n     * Usually \"hash-less\" navigation works better for SEO and it's more user friendly too, but it might\n     * requires additional server-side configuration in order to properly work.\n     *\n     * On the other side hash-navigation is much easier to deploy, it even works over the file protocol.\n     *\n     * By default, this property is `true`, change to `false` to allow hash-less URLs.\n     */\n    this.useHash = true;\n  }\n  async componentWillLoad() {\n    await waitUntilNavNode();\n    const canProceed = await this.runGuards(this.getPath());\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        const { redirect } = canProceed;\n        const path = parsePath(redirect);\n        this.setPath(path.segments, ROUTER_INTENT_NONE, path.queryString);\n        await this.writeNavStateRoot(path.segments, ROUTER_INTENT_NONE);\n      }\n    }\n    else {\n      await this.onRoutesChanged();\n    }\n  }\n  componentDidLoad() {\n    window.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\n    window.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\n  }\n  async onPopState() {\n    const direction = this.historyDirection();\n    let segments = this.getPath();\n    const canProceed = await this.runGuards(segments);\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        segments = parsePath(canProceed.redirect).segments;\n      }\n      else {\n        return false;\n      }\n    }\n    return this.writeNavStateRoot(segments, direction);\n  }\n  onBackButton(ev) {\n    ev.detail.register(0, processNextHandler => {\n      this.back();\n      processNextHandler();\n    });\n  }\n  /** @internal */\n  async canTransition() {\n    const canProceed = await this.runGuards();\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        return canProceed.redirect;\n      }\n      else {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Navigate to the specified URL.\n   *\n   * @param url The url to navigate to.\n   * @param direction The direction of the animation. Defaults to `\"forward\"`.\n   */\n  async push(url, direction = 'forward', animation) {\n    if (url.startsWith('.')) {\n      url = (new URL(url, window.location.href)).pathname;\n    }\n    let parsedPath = parsePath(url);\n    const canProceed = await this.runGuards(parsedPath.segments);\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        parsedPath = parsePath(canProceed.redirect);\n      }\n      else {\n        return false;\n      }\n    }\n    this.setPath(parsedPath.segments, direction, parsedPath.queryString);\n    return this.writeNavStateRoot(parsedPath.segments, direction, animation);\n  }\n  /**\n   * Go back to previous page in the window.history.\n   */\n  back() {\n    window.history.back();\n    return Promise.resolve(this.waitPromise);\n  }\n  /** @internal */\n  async printDebug() {\n    printRoutes(readRoutes(this.el));\n    printRedirects(readRedirects(this.el));\n  }\n  /** @internal */\n  async navChanged(direction) {\n    if (this.busy) {\n      console.warn('[ion-router] router is busy, navChanged was cancelled');\n      return false;\n    }\n    const { ids, outlet } = await readNavState(window.document.body);\n    const routes = readRoutes(this.el);\n    const chain = routerIDsToChain(ids, routes);\n    if (!chain) {\n      console.warn('[ion-router] no matching URL for ', ids.map(i => i.id));\n      return false;\n    }\n    const path = chainToPath(chain);\n    if (!path) {\n      console.warn('[ion-router] router could not match path because some required param is missing');\n      return false;\n    }\n    this.setPath(path, direction);\n    await this.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, path, null, ids.length);\n    return true;\n  }\n  // This handler gets called when a `ion-route-redirect` component is added to the DOM or if the from or to property of such node changes.\n  onRedirectChanged() {\n    const path = this.getPath();\n    if (path && findRouteRedirect(path, readRedirects(this.el))) {\n      this.writeNavStateRoot(path, ROUTER_INTENT_NONE);\n    }\n  }\n  // This handler gets called when a `ion-route` component is added to the DOM or if the from or to property of such node changes.\n  onRoutesChanged() {\n    return this.writeNavStateRoot(this.getPath(), ROUTER_INTENT_NONE);\n  }\n  historyDirection() {\n    var _a;\n    const win = window;\n    if (win.history.state === null) {\n      this.state++;\n      win.history.replaceState(this.state, win.document.title, (_a = win.document.location) === null || _a === void 0 ? void 0 : _a.href);\n    }\n    const state = win.history.state;\n    const lastState = this.lastState;\n    this.lastState = state;\n    if (state > lastState || (state >= lastState && lastState > 0)) {\n      return ROUTER_INTENT_FORWARD;\n    }\n    if (state < lastState) {\n      return ROUTER_INTENT_BACK;\n    }\n    return ROUTER_INTENT_NONE;\n  }\n  async writeNavStateRoot(path, direction, animation) {\n    if (!path) {\n      console.error('[ion-router] URL is not part of the routing set');\n      return false;\n    }\n    // lookup redirect rule\n    const redirects = readRedirects(this.el);\n    const redirect = findRouteRedirect(path, redirects);\n    let redirectFrom = null;\n    if (redirect) {\n      const { segments, queryString } = redirect.to;\n      this.setPath(segments, direction, queryString);\n      redirectFrom = redirect.from;\n      path = segments;\n    }\n    // lookup route chain\n    const routes = readRoutes(this.el);\n    const chain = routerPathToChain(path, routes);\n    if (!chain) {\n      console.error('[ion-router] the path does not match any route');\n      return false;\n    }\n    // write DOM give\n    return this.safeWriteNavState(document.body, chain, direction, path, redirectFrom, 0, animation);\n  }\n  async safeWriteNavState(node, chain, direction, path, redirectFrom, index = 0, animation) {\n    const unlock = await this.lock();\n    let changed = false;\n    try {\n      changed = await this.writeNavState(node, chain, direction, path, redirectFrom, index, animation);\n    }\n    catch (e) {\n      console.error(e);\n    }\n    unlock();\n    return changed;\n  }\n  async lock() {\n    const p = this.waitPromise;\n    let resolve;\n    this.waitPromise = new Promise(r => resolve = r);\n    if (p !== undefined) {\n      await p;\n    }\n    return resolve;\n  }\n  // Executes the beforeLeave hook of the source route and the beforeEnter hook of the target route if they exist.\n  //\n  // When the beforeLeave hook does not return true (to allow navigating) then that value is returned early and the beforeEnter is executed.\n  // Otherwise the beforeEnterHook hook of the target route is executed.\n  async runGuards(to = this.getPath(), from) {\n    if (from === undefined) {\n      from = parsePath(this.previousPath).segments;\n    }\n    if (!to || !from) {\n      return true;\n    }\n    const routes = readRoutes(this.el);\n    const fromChain = routerPathToChain(from, routes);\n    const beforeLeaveHook = fromChain && fromChain[fromChain.length - 1].beforeLeave;\n    const canLeave = beforeLeaveHook ? await beforeLeaveHook() : true;\n    if (canLeave === false || typeof canLeave === 'object') {\n      return canLeave;\n    }\n    const toChain = routerPathToChain(to, routes);\n    const beforeEnterHook = toChain && toChain[toChain.length - 1].beforeEnter;\n    return beforeEnterHook ? beforeEnterHook() : true;\n  }\n  async writeNavState(node, chain, direction, path, redirectFrom, index = 0, animation) {\n    if (this.busy) {\n      console.warn('[ion-router] router is busy, transition was cancelled');\n      return false;\n    }\n    this.busy = true;\n    // generate route event and emit will change\n    const routeEvent = this.routeChangeEvent(path, redirectFrom);\n    if (routeEvent) {\n      this.ionRouteWillChange.emit(routeEvent);\n    }\n    const changed = await writeNavState(node, chain, direction, index, false, animation);\n    this.busy = false;\n    // emit did change\n    if (routeEvent) {\n      this.ionRouteDidChange.emit(routeEvent);\n    }\n    return changed;\n  }\n  setPath(path, direction, queryString) {\n    this.state++;\n    writePath(window.history, this.root, this.useHash, path, direction, this.state, queryString);\n  }\n  getPath() {\n    return readPath(window.location, this.root, this.useHash);\n  }\n  routeChangeEvent(path, redirectFromPath) {\n    const from = this.previousPath;\n    const to = generatePath(path);\n    this.previousPath = to;\n    if (to === from) {\n      return null;\n    }\n    const redirectedFrom = redirectFromPath ? generatePath(redirectFromPath) : null;\n    return {\n      from,\n      redirectedFrom,\n      to,\n    };\n  }\n  get el() { return getElement(this); }\n};\n\nconst routerLinkCss = \":host{--background:transparent;--color:var(--ion-color-primary, #3880ff);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\";\n\nconst RouterLink = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * When using a router, it specifies the transition direction when navigating to\n     * another page using `href`.\n     */\n    this.routerDirection = 'forward';\n    this.onClick = (ev) => {\n      openURL(this.href, ev, this.routerDirection, this.routerAnimation);\n    };\n  }\n  render() {\n    const mode = getIonMode(this);\n    const attrs = {\n      href: this.href,\n      rel: this.rel,\n      target: this.target\n    };\n    return (h(Host, { onClick: this.onClick, class: createColorClasses(this.color, {\n        [mode]: true,\n        'ion-activatable': true\n      }) }, h(\"a\", Object.assign({}, attrs), h(\"slot\", null))));\n  }\n};\nRouterLink.style = routerLinkCss;\n\nexport { Route as ion_route, RouteRedirect as ion_route_redirect, Router as ion_router, RouterLink as ion_router_link };\n"],"sourceRoot":"webpack:///","file":"29-es5.js"}