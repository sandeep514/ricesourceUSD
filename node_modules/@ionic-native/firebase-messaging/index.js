var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var FirebaseMessagingOriginal = /** @class */ (function (_super) {
    __extends(FirebaseMessagingOriginal, _super);
    function FirebaseMessagingOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FirebaseMessagingOriginal.prototype.onMessage = function () { return cordova(this, "onMessage", { "observable": true, "callbackOrder": "reverse" }, arguments); };
    FirebaseMessagingOriginal.prototype.onBackgroundMessage = function () { return cordova(this, "onBackgroundMessage", { "observable": true, "callbackOrder": "reverse" }, arguments); };
    FirebaseMessagingOriginal.prototype.requestPermission = function (options) { return cordova(this, "requestPermission", { "sync": true }, arguments); };
    FirebaseMessagingOriginal.prototype.getInstanceId = function () { return cordova(this, "getInstanceId", { "sync": true }, arguments); };
    FirebaseMessagingOriginal.prototype.getToken = function (type) { return cordova(this, "getToken", { "sync": true }, arguments); };
    FirebaseMessagingOriginal.prototype.onTokenRefresh = function () { return cordova(this, "onTokenRefresh", { "observable": true, "callbackOrder": "reverse" }, arguments); };
    FirebaseMessagingOriginal.prototype.subscribe = function (topic) { return cordova(this, "subscribe", { "sync": true }, arguments); };
    FirebaseMessagingOriginal.prototype.unsubscribe = function (topic) { return cordova(this, "unsubscribe", { "sync": true }, arguments); };
    FirebaseMessagingOriginal.prototype.getBadge = function () { return cordova(this, "getBadge", { "sync": true }, arguments); };
    FirebaseMessagingOriginal.prototype.setBadge = function (value) { return cordova(this, "setBadge", { "sync": true }, arguments); };
    FirebaseMessagingOriginal.prototype.deleteToken = function () { return cordova(this, "deleteToken", { "sync": true }, arguments); };
    FirebaseMessagingOriginal.pluginName = "FirebaseMessaging";
    FirebaseMessagingOriginal.plugin = "cordova-plugin-firebase-messaging";
    FirebaseMessagingOriginal.pluginRef = "cordova.plugins.firebase.messaging";
    FirebaseMessagingOriginal.repo = "https://github.com/chemerisuk/cordova-plugin-firebase-messaging";
    FirebaseMessagingOriginal.platforms = ["Android", "iOS"];
    return FirebaseMessagingOriginal;
}(IonicNativePlugin));
var FirebaseMessaging = new FirebaseMessagingOriginal();
export { FirebaseMessaging };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2ZpcmViYXNlLW1lc3NhZ2luZy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQXFFSyxxQ0FBaUI7Ozs7SUFPdEQscUNBQVM7SUFVVCwrQ0FBbUI7SUFXbkIsNkNBQWlCLGFBQUMsT0FBaUM7SUFRbkQseUNBQWE7SUFjYixvQ0FBUSxhQUFDLElBQWlDO0lBVzFDLDBDQUFjO0lBV2QscUNBQVMsYUFBQyxLQUFhO0lBV3ZCLHVDQUFXLGFBQUMsS0FBYTtJQVV6QixvQ0FBUTtJQVdSLG9DQUFRLGFBQUMsS0FBYTtJQVV0Qix1Q0FBVzs7Ozs7OzRCQXpMYjtFQXVFdUMsaUJBQWlCO1NBQTNDLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElGaXJlYmFzZUdDTU1lc3NhZ2Uge1xuICBnY206IHtcbiAgICBib2R5OiBzdHJpbmc7XG4gICAgdGl0bGU6IHN0cmluZztcbiAgICBzb3VuZDogc3RyaW5nO1xuICAgIGljb246IHN0cmluZztcbiAgICB0YWc6IHN0cmluZztcbiAgICBjb2xvcjogc3RyaW5nO1xuICAgIGNsaWNrQWN0aW9uOiBzdHJpbmc7XG4gIH07XG4gICdnb29nbGUubWVzc2FnZV9pZCc6IHN0cmluZztcbiAgJ2dvb2dsZS5zZW50X3RpbWUnOiBudW1iZXI7XG4gIFtrZXk6IHN0cmluZ106IGFueTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRmlyZWJhc2VBUFNNZXNzYWdlIHtcbiAgYXBzOiB7XG4gICAgYWxlcnQ6IHtcbiAgICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgICBib2R5OiBzdHJpbmc7XG4gICAgfTtcbiAgICBiYWRnZT86IG51bWJlcjtcbiAgfTtcbiAgJ2djbS5tZXNzYWdlX2lkJzogJ3N0cmluZyc7XG4gIFtrZXk6IHN0cmluZ106IGFueTtcbn1cblxuZXhwb3J0IHR5cGUgSUZpcmViYXNlTWVzc2FnZSA9IElGaXJlYmFzZUFQU01lc3NhZ2UgfCBJRmlyZWJhc2VHQ01NZXNzYWdlO1xuXG5leHBvcnQgaW50ZXJmYWNlIElSZXF1ZXN0UGVybWlzc2lvbk9wdGlvbnMge1xuICBmb3JjZVNob3c/OiBib29sZWFuO1xufVxuXG5leHBvcnQgdHlwZSBGaXJlYmFzZU1lc3NhZ2luZ1Rva2VuVHlwZSA9ICdhcG5zLWJ1ZmZlcicgfCAnYXBucy1zdHJpbmcnO1xuXG4vKipcbiAqIEBiZXRhXG4gKiBAbmFtZSBGaXJlYmFzZSBNZXNzYWdpbmdcbiAqIEBkZXNjcmlwdGlvblxuICogQ29yZG92YSBwbHVnaW4gZm9yIEZpcmViYXNlIE1lc3NhZ2luZ1xuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgRmlyZWJhc2VNZXNzYWdpbmcgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2ZpcmViYXNlLW1lc3NhZ2luZy9uZ3gnO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGZpcmViYXNlTWVzc2FnaW5nOiBGaXJlYmFzZU1lc3NhZ2luZykgeyB9XG4gKlxuICogLi4uXG4gKlxuICpcbiAqIHRoaXMuZmlyZWJhc2VNZXNzYWdpbmcubG9nRXZlbnQoJ3BhZ2VfdmlldycsIHtwYWdlOiBcImRhc2hib2FyZFwifSlcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiBgYGBcbiAqIEBpbnRlcmZhY2VzXG4gKiBJRmlyZWJhc2VNZXNzYWdlXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnRmlyZWJhc2VNZXNzYWdpbmcnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1maXJlYmFzZS1tZXNzYWdpbmcnLFxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuZmlyZWJhc2UubWVzc2FnaW5nJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9jaGVtZXJpc3VrL2NvcmRvdmEtcGx1Z2luLWZpcmViYXNlLW1lc3NhZ2luZycsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBGaXJlYmFzZU1lc3NhZ2luZyBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIGEgcHVzaCBtZXNzYWdlIHJlY2VpdmVkIHdoaWxlIGFwcCBpcyBpbiBmb3JlZ3JvdW5kLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBvYnNlcnZhYmxlOiB0cnVlLCBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScgfSlcbiAgb25NZXNzYWdlKCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIGEgcHVzaCBtZXNzYWdlIHJlY2VpdmVkIHdoaWxlIGFwcCBpcyBpbiBiYWNrZ3JvdW5kLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBvYnNlcnZhYmxlOiB0cnVlLCBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScgfSlcbiAgb25CYWNrZ3JvdW5kTWVzc2FnZSgpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHcmFudCBwZXJtaXNzaW9uIHRvIHJlY2VpdmUgcHVzaCBub3RpZmljYXRpb25zICh3aWxsIHRyaWdnZXIgcHJvbXB0IG9uIGlPUykuXG4gICAqXG4gICAqIEBwYXJhbSB7SVJlcXVlc3RQZXJtaXNzaW9uT3B0aW9uc30gW29wdGlvbnNdXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59XG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgcmVxdWVzdFBlcm1pc3Npb24ob3B0aW9ucz86IHsgZm9yY2VTaG93PzogYm9vbGVhbiB9KTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHByb21pc2UgdGhhZiBmdWxmaWxscyB3aXRoIHRoZSBkZXZpY2UgaW5zdGFuY2UgSURcbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICBnZXRJbnN0YW5jZUlkKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBwcm9taXNlIHRoYXQgZnVsZmlsbHMgd2l0aCB0aGUgY3VycmVudCBGQ00gdG9rZW5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgYWxzbyBhY2NlcHRzIG9wdGlvbmFsIGFyZ3VtZW50IHR5cGUuXG4gICAqIEN1cnJlbnRseSBpT1MgaW1wbGVtZW50YXRpb24gc3VwcG9ydHMgdmFsdWVzIFwiYXBucy1idWZmZXJcIiBhbmQgXCJhcG5zLXN0cmluZ1wiIHRoYXQgZGVmaW5lcyBwcmVzZW50YXRpb24gb2YgcmVzb2x2ZWQgQVBOUyB0b2tlbi5cbiAgICpcbiAgICogQHBhcmFtIHtGaXJlYmFzZU1lc3NhZ2luZ1Rva2VuVHlwZX0gW3R5cGVdIGlPUyBvbmx5LiBEZWZpbmVzIHByZXNlbnRhdGlvbiBvZiByZXNvbHZlZCBBUE5TIHRva2VuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59XG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgZ2V0VG9rZW4odHlwZT86IEZpcmViYXNlTWVzc2FnaW5nVG9rZW5UeXBlKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVHJpZ2dlcnMgZXZlcnkgdGltZSB3aGVuIEZDTSB0b2tlbiB1cGRhdGVkLlxuICAgKiBZb3Ugc2hvdWxkIHVzdWFsbHkgY2FsbCBnZXRUb2tlbiB0byBnZXQgYW4gdXBkYXRlZCB0b2tlbiBhbmQgc2VuZCBpdCB0byBzZXJ2ZXIuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPHZvaWQ+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBvYnNlcnZhYmxlOiB0cnVlLCBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScgfSlcbiAgb25Ub2tlblJlZnJlc2goKTogT2JzZXJ2YWJsZTx2b2lkPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZSB0byB0b3BpYyBpbiBiYWNrZ3JvdW5kLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9waWNcbiAgICogQHJldHVybnMge1Byb21pc2U8bnVsbD59XG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgc3Vic2NyaWJlKHRvcGljOiBzdHJpbmcpOiBQcm9taXNlPG51bGw+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVW5zdWJzY3JpYmUgZnJvbSB0b3BpYyBpbiBiYWNrZ3JvdW5kLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9waWNcbiAgICogQHJldHVybnMge1Byb21pc2U8bnVsbD59XG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgdW5zdWJzY3JpYmUodG9waWM6IHN0cmluZyk6IFByb21pc2U8bnVsbD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWFkcyBjdXJyZW50IGJhZGdlIG51bWJlciAoaWYgc3VwcG9ydGVkKS5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8bnVtYmVyPn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICBnZXRCYWRnZSgpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIGN1cnJlbnQgYmFkZ2UgbnVtYmVyIChpZiBzdXBwb3J0ZWQpLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAgICogQHJldHVybnMge1Byb21pc2U8bnVsbD59XG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgc2V0QmFkZ2UodmFsdWU6IG51bWJlcik6IFByb21pc2U8bnVsbD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXZva2UgdGhlIGN1cnJlbnQgRkNNIHRva2VuLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxudWxsPn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICBkZWxldGVUb2tlbigpOiBQcm9taXNlPG51bGw+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==