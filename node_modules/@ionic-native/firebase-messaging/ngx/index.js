import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var FirebaseMessaging = /** @class */ (function (_super) {
    __extends(FirebaseMessaging, _super);
    function FirebaseMessaging() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FirebaseMessaging.prototype.onMessage = function () { return cordova(this, "onMessage", { "observable": true, "callbackOrder": "reverse" }, arguments); };
    FirebaseMessaging.prototype.onBackgroundMessage = function () { return cordova(this, "onBackgroundMessage", { "observable": true, "callbackOrder": "reverse" }, arguments); };
    FirebaseMessaging.prototype.requestPermission = function (options) { return cordova(this, "requestPermission", { "sync": true }, arguments); };
    FirebaseMessaging.prototype.getInstanceId = function () { return cordova(this, "getInstanceId", { "sync": true }, arguments); };
    FirebaseMessaging.prototype.getToken = function (type) { return cordova(this, "getToken", { "sync": true }, arguments); };
    FirebaseMessaging.prototype.onTokenRefresh = function () { return cordova(this, "onTokenRefresh", { "observable": true, "callbackOrder": "reverse" }, arguments); };
    FirebaseMessaging.prototype.subscribe = function (topic) { return cordova(this, "subscribe", { "sync": true }, arguments); };
    FirebaseMessaging.prototype.unsubscribe = function (topic) { return cordova(this, "unsubscribe", { "sync": true }, arguments); };
    FirebaseMessaging.prototype.getBadge = function () { return cordova(this, "getBadge", { "sync": true }, arguments); };
    FirebaseMessaging.prototype.setBadge = function (value) { return cordova(this, "setBadge", { "sync": true }, arguments); };
    FirebaseMessaging.prototype.deleteToken = function () { return cordova(this, "deleteToken", { "sync": true }, arguments); };
    FirebaseMessaging.pluginName = "FirebaseMessaging";
    FirebaseMessaging.plugin = "cordova-plugin-firebase-messaging";
    FirebaseMessaging.pluginRef = "cordova.plugins.firebase.messaging";
    FirebaseMessaging.repo = "https://github.com/chemerisuk/cordova-plugin-firebase-messaging";
    FirebaseMessaging.platforms = ["Android", "iOS"];
    FirebaseMessaging.decorators = [
        { type: Injectable }
    ];
    return FirebaseMessaging;
}(IonicNativePlugin));
export { FirebaseMessaging };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2ZpcmViYXNlLW1lc3NhZ2luZy9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQXFFSyxxQ0FBaUI7Ozs7SUFPdEQscUNBQVM7SUFVVCwrQ0FBbUI7SUFXbkIsNkNBQWlCLGFBQUMsT0FBaUM7SUFRbkQseUNBQWE7SUFjYixvQ0FBUSxhQUFDLElBQWlDO0lBVzFDLDBDQUFjO0lBV2QscUNBQVMsYUFBQyxLQUFhO0lBV3ZCLHVDQUFXLGFBQUMsS0FBYTtJQVV6QixvQ0FBUTtJQVdSLG9DQUFRLGFBQUMsS0FBYTtJQVV0Qix1Q0FBVzs7Ozs7OztnQkFuSFosVUFBVTs7NEJBdEVYO0VBdUV1QyxpQkFBaUI7U0FBM0MsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUZpcmViYXNlR0NNTWVzc2FnZSB7XG4gIGdjbToge1xuICAgIGJvZHk6IHN0cmluZztcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIHNvdW5kOiBzdHJpbmc7XG4gICAgaWNvbjogc3RyaW5nO1xuICAgIHRhZzogc3RyaW5nO1xuICAgIGNvbG9yOiBzdHJpbmc7XG4gICAgY2xpY2tBY3Rpb246IHN0cmluZztcbiAgfTtcbiAgJ2dvb2dsZS5tZXNzYWdlX2lkJzogc3RyaW5nO1xuICAnZ29vZ2xlLnNlbnRfdGltZSc6IG51bWJlcjtcbiAgW2tleTogc3RyaW5nXTogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElGaXJlYmFzZUFQU01lc3NhZ2Uge1xuICBhcHM6IHtcbiAgICBhbGVydDoge1xuICAgICAgdGl0bGU6IHN0cmluZztcbiAgICAgIGJvZHk6IHN0cmluZztcbiAgICB9O1xuICAgIGJhZGdlPzogbnVtYmVyO1xuICB9O1xuICAnZ2NtLm1lc3NhZ2VfaWQnOiAnc3RyaW5nJztcbiAgW2tleTogc3RyaW5nXTogYW55O1xufVxuXG5leHBvcnQgdHlwZSBJRmlyZWJhc2VNZXNzYWdlID0gSUZpcmViYXNlQVBTTWVzc2FnZSB8IElGaXJlYmFzZUdDTU1lc3NhZ2U7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVJlcXVlc3RQZXJtaXNzaW9uT3B0aW9ucyB7XG4gIGZvcmNlU2hvdz86IGJvb2xlYW47XG59XG5cbmV4cG9ydCB0eXBlIEZpcmViYXNlTWVzc2FnaW5nVG9rZW5UeXBlID0gJ2FwbnMtYnVmZmVyJyB8ICdhcG5zLXN0cmluZyc7XG5cbi8qKlxuICogQGJldGFcbiAqIEBuYW1lIEZpcmViYXNlIE1lc3NhZ2luZ1xuICogQGRlc2NyaXB0aW9uXG4gKiBDb3Jkb3ZhIHBsdWdpbiBmb3IgRmlyZWJhc2UgTWVzc2FnaW5nXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBGaXJlYmFzZU1lc3NhZ2luZyB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvZmlyZWJhc2UtbWVzc2FnaW5nL25neCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgZmlyZWJhc2VNZXNzYWdpbmc6IEZpcmViYXNlTWVzc2FnaW5nKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKlxuICogdGhpcy5maXJlYmFzZU1lc3NhZ2luZy5sb2dFdmVudCgncGFnZV92aWV3Jywge3BhZ2U6IFwiZGFzaGJvYXJkXCJ9KVxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKHJlcykpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICpcbiAqIGBgYFxuICogQGludGVyZmFjZXNcbiAqIElGaXJlYmFzZU1lc3NhZ2VcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdGaXJlYmFzZU1lc3NhZ2luZycsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWZpcmViYXNlLW1lc3NhZ2luZycsXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5maXJlYmFzZS5tZXNzYWdpbmcnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2NoZW1lcmlzdWsvY29yZG92YS1wbHVnaW4tZmlyZWJhc2UtbWVzc2FnaW5nJyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEZpcmViYXNlTWVzc2FnaW5nIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gYSBwdXNoIG1lc3NhZ2UgcmVjZWl2ZWQgd2hpbGUgYXBwIGlzIGluIGZvcmVncm91bmQuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7IG9ic2VydmFibGU6IHRydWUsIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyB9KVxuICBvbk1lc3NhZ2UoKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gYSBwdXNoIG1lc3NhZ2UgcmVjZWl2ZWQgd2hpbGUgYXBwIGlzIGluIGJhY2tncm91bmQuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7IG9ic2VydmFibGU6IHRydWUsIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyB9KVxuICBvbkJhY2tncm91bmRNZXNzYWdlKCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEdyYW50IHBlcm1pc3Npb24gdG8gcmVjZWl2ZSBwdXNoIG5vdGlmaWNhdGlvbnMgKHdpbGwgdHJpZ2dlciBwcm9tcHQgb24gaU9TKS5cbiAgICpcbiAgICogQHBhcmFtIHtJUmVxdWVzdFBlcm1pc3Npb25PcHRpb25zfSBbb3B0aW9uc11cbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICByZXF1ZXN0UGVybWlzc2lvbihvcHRpb25zPzogeyBmb3JjZVNob3c/OiBib29sZWFuIH0pOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgcHJvbWlzZSB0aGFmIGZ1bGZpbGxzIHdpdGggdGhlIGRldmljZSBpbnN0YW5jZSBJRFxuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gIGdldEluc3RhbmNlSWQoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHByb21pc2UgdGhhdCBmdWxmaWxscyB3aXRoIHRoZSBjdXJyZW50IEZDTSB0b2tlblxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBhbHNvIGFjY2VwdHMgb3B0aW9uYWwgYXJndW1lbnQgdHlwZS5cbiAgICogQ3VycmVudGx5IGlPUyBpbXBsZW1lbnRhdGlvbiBzdXBwb3J0cyB2YWx1ZXMgXCJhcG5zLWJ1ZmZlclwiIGFuZCBcImFwbnMtc3RyaW5nXCIgdGhhdCBkZWZpbmVzIHByZXNlbnRhdGlvbiBvZiByZXNvbHZlZCBBUE5TIHRva2VuLlxuICAgKlxuICAgKiBAcGFyYW0ge0ZpcmViYXNlTWVzc2FnaW5nVG9rZW5UeXBlfSBbdHlwZV0gaU9TIG9ubHkuIERlZmluZXMgcHJlc2VudGF0aW9uIG9mIHJlc29sdmVkIEFQTlMgdG9rZW5cbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICBnZXRUb2tlbih0eXBlPzogRmlyZWJhc2VNZXNzYWdpbmdUb2tlblR5cGUpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmlnZ2VycyBldmVyeSB0aW1lIHdoZW4gRkNNIHRva2VuIHVwZGF0ZWQuXG4gICAqIFlvdSBzaG91bGQgdXN1YWxseSBjYWxsIGdldFRva2VuIHRvIGdldCBhbiB1cGRhdGVkIHRva2VuIGFuZCBzZW5kIGl0IHRvIHNlcnZlci5cbiAgICpcbiAgICogQHJldHVybnMge09ic2VydmFibGU8dm9pZD59XG4gICAqL1xuICBAQ29yZG92YSh7IG9ic2VydmFibGU6IHRydWUsIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyB9KVxuICBvblRva2VuUmVmcmVzaCgpOiBPYnNlcnZhYmxlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU3Vic2NyaWJlIHRvIHRvcGljIGluIGJhY2tncm91bmQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BpY1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxudWxsPn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICBzdWJzY3JpYmUodG9waWM6IHN0cmluZyk6IFByb21pc2U8bnVsbD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBVbnN1YnNjcmliZSBmcm9tIHRvcGljIGluIGJhY2tncm91bmQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BpY1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxudWxsPn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICB1bnN1YnNjcmliZSh0b3BpYzogc3RyaW5nKTogUHJvbWlzZTxudWxsPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlYWRzIGN1cnJlbnQgYmFkZ2UgbnVtYmVyIChpZiBzdXBwb3J0ZWQpLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxudW1iZXI+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gIGdldEJhZGdlKCk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgY3VycmVudCBiYWRnZSBudW1iZXIgKGlmIHN1cHBvcnRlZCkuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxudWxsPn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICBzZXRCYWRnZSh2YWx1ZTogbnVtYmVyKTogUHJvbWlzZTxudWxsPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldm9rZSB0aGUgY3VycmVudCBGQ00gdG9rZW4uXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPG51bGw+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gIGRlbGV0ZVRva2VuKCk6IFByb21pc2U8bnVsbD4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19