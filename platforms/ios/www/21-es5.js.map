{"version":3,"sources":["node_modules/@ionic/core/dist/esm/ion-nav_2.entry.js"],"names":[],"mappings":"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","sourcesContent":["import { r as registerInstance, e as createEvent, h, i as getElement, H as Host } from './index-7a8b7a1c.js';\nimport { b as getIonMode, c as config } from './ionic-global-63a97a32.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier-eea9a7a9.js';\nimport { m as assert } from './helpers-1457892a.js';\nimport { l as lifecycle, t as transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index-a7711c1e.js';\nimport { a as attachComponent } from './framework-delegate-94e770cc.js';\n\nconst VIEW_STATE_NEW = 1;\nconst VIEW_STATE_ATTACHED = 2;\nconst VIEW_STATE_DESTROYED = 3;\nclass ViewController {\n  constructor(component, params) {\n    this.component = component;\n    this.params = params;\n    this.state = VIEW_STATE_NEW;\n  }\n  async init(container) {\n    this.state = VIEW_STATE_ATTACHED;\n    if (!this.element) {\n      const component = this.component;\n      this.element = await attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\n    }\n  }\n  /**\n   * DOM WRITE\n   */\n  _destroy() {\n    assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\n    const element = this.element;\n    if (element) {\n      if (this.delegate) {\n        this.delegate.removeViewFromDom(element.parentElement, element);\n      }\n      else {\n        element.remove();\n      }\n    }\n    this.nav = undefined;\n    this.state = VIEW_STATE_DESTROYED;\n  }\n}\nconst matches = (view, id, params) => {\n  if (!view) {\n    return false;\n  }\n  if (view.component !== id) {\n    return false;\n  }\n  const currentParams = view.params;\n  if (currentParams === params) {\n    return true;\n  }\n  if (!currentParams && !params) {\n    return true;\n  }\n  if (!currentParams || !params) {\n    return false;\n  }\n  const keysA = Object.keys(currentParams);\n  const keysB = Object.keys(params);\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n  // Test for A's keys different from B.\n  for (const key of keysA) {\n    if (currentParams[key] !== params[key]) {\n      return false;\n    }\n  }\n  return true;\n};\nconst convertToView = (page, params) => {\n  if (!page) {\n    return null;\n  }\n  if (page instanceof ViewController) {\n    return page;\n  }\n  return new ViewController(page, params);\n};\nconst convertToViews = (pages) => {\n  return pages.map(page => {\n    if (page instanceof ViewController) {\n      return page;\n    }\n    if ('component' in page) {\n      /**\n       * TODO Ionic 6:\n       * Consider switching to just using `undefined` here\n       * as well as on the public interfaces and on\n       * `NavComponentWithProps`. Previously `pages` was\n       * of type `any[]` so TypeScript did not catch this.\n       */\n      return convertToView(page.component, (page.componentProps === null) ? undefined : page.componentProps);\n    }\n    return convertToView(page, undefined);\n  }).filter(v => v !== null);\n};\n\nconst navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";\n\nconst Nav = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n    this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\n    this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\n    this.transInstr = [];\n    this.animationEnabled = true;\n    this.useRouter = false;\n    this.isTransitioning = false;\n    this.destroyed = false;\n    this.views = [];\n    /**\n     * If `true`, the nav should animate the transition of components.\n     */\n    this.animated = true;\n  }\n  swipeGestureChanged() {\n    if (this.gesture) {\n      this.gesture.enable(this.swipeGesture === true);\n    }\n  }\n  rootChanged() {\n    if (this.root !== undefined) {\n      if (!this.useRouter) {\n        this.setRoot(this.root, this.rootParams);\n      }\n    }\n  }\n  componentWillLoad() {\n    this.useRouter =\n      !!document.querySelector('ion-router') &&\n        !this.el.closest('[no-router]');\n    if (this.swipeGesture === undefined) {\n      const mode = getIonMode(this);\n      this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n    }\n    this.ionNavWillLoad.emit();\n  }\n  async componentDidLoad() {\n    this.rootChanged();\n    this.gesture = (await import('./swipe-back-1bbd08e0.js')).createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\n    this.swipeGestureChanged();\n  }\n  disconnectedCallback() {\n    for (const view of this.views) {\n      lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      view._destroy();\n    }\n    if (this.gesture) {\n      this.gesture.destroy();\n      this.gesture = undefined;\n    }\n    // release swipe back gesture and transition\n    this.transInstr.length = this.views.length = 0;\n    this.destroyed = true;\n  }\n  /**\n   * Push a new component onto the current navigation stack. Pass any additional\n   * information along as an object. This additional information is accessible\n   * through NavParams.\n   *\n   * @param component The component to push onto the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  push(component, componentProps, opts, done) {\n    return this.queueTrns({\n      insertStart: -1,\n      insertViews: [{ component, componentProps }],\n      opts\n    }, done);\n  }\n  /**\n   * Inserts a component into the navigation stack at the specified index.\n   * This is useful to add a component at any point in the navigation stack.\n   *\n   * @param insertIndex The index to insert the component at in the stack.\n   * @param component The component to insert into the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  insert(insertIndex, component, componentProps, opts, done) {\n    return this.queueTrns({\n      insertStart: insertIndex,\n      insertViews: [{ component, componentProps }],\n      opts\n    }, done);\n  }\n  /**\n   * Inserts an array of components into the navigation stack at the specified index.\n   * The last component in the array will become instantiated as a view, and animate\n   * in to become the active view.\n   *\n   * @param insertIndex The index to insert the components at in the stack.\n   * @param insertComponents The components to insert into the navigation stack.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  insertPages(insertIndex, insertComponents, opts, done) {\n    return this.queueTrns({\n      insertStart: insertIndex,\n      insertViews: insertComponents,\n      opts\n    }, done);\n  }\n  /**\n   * Pop a component off of the navigation stack. Navigates back from the current\n   * component.\n   *\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  pop(opts, done) {\n    return this.queueTrns({\n      removeStart: -1,\n      removeCount: 1,\n      opts\n    }, done);\n  }\n  /**\n   * Pop to a specific index in the navigation stack.\n   *\n   * @param indexOrViewCtrl The index or view controller to pop to.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  popTo(indexOrViewCtrl, opts, done) {\n    const tiConfig = {\n      removeStart: -1,\n      removeCount: -1,\n      opts\n    };\n    if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n      tiConfig.removeView = indexOrViewCtrl;\n      tiConfig.removeStart = 1;\n    }\n    else if (typeof indexOrViewCtrl === 'number') {\n      tiConfig.removeStart = indexOrViewCtrl + 1;\n    }\n    return this.queueTrns(tiConfig, done);\n  }\n  /**\n   * Navigate back to the root of the stack, no matter how far back that is.\n   *\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  popToRoot(opts, done) {\n    return this.queueTrns({\n      removeStart: 1,\n      removeCount: -1,\n      opts\n    }, done);\n  }\n  /**\n   * Removes a component from the navigation stack at the specified index.\n   *\n   * @param startIndex The number to begin removal at.\n   * @param removeCount The number of components to remove.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  removeIndex(startIndex, removeCount = 1, opts, done) {\n    return this.queueTrns({\n      removeStart: startIndex,\n      removeCount,\n      opts\n    }, done);\n  }\n  /**\n   * Set the root for the current navigation stack to a component.\n   *\n   * @param component The component to set as the root of the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  setRoot(component, componentProps, opts, done) {\n    return this.setPages([{ component, componentProps }], opts, done);\n  }\n  /**\n   * Set the views of the current navigation stack and navigate to the last view.\n   * By default animations are disabled, but they can be enabled by passing options\n   * to the navigation controller. Navigation parameters can also be passed to the\n   * individual pages in the array.\n   *\n   * @param views The list of views to set as the navigation stack.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  setPages(views, opts, done) {\n    if (opts == null) {\n      opts = {};\n    }\n    // if animation wasn't set to true then default it to NOT animate\n    if (opts.animated !== true) {\n      opts.animated = false;\n    }\n    return this.queueTrns({\n      insertStart: 0,\n      insertViews: views,\n      removeStart: 0,\n      removeCount: -1,\n      opts\n    }, done);\n  }\n  /** @internal */\n  setRouteId(id, params, direction, animation) {\n    const active = this.getActiveSync();\n    if (matches(active, id, params)) {\n      return Promise.resolve({\n        changed: false,\n        element: active.element\n      });\n    }\n    let resolve;\n    const promise = new Promise(r => (resolve = r));\n    let finish;\n    const commonOpts = {\n      updateURL: false,\n      viewIsReady: enteringEl => {\n        let mark;\n        const p = new Promise(r => (mark = r));\n        resolve({\n          changed: true,\n          element: enteringEl,\n          markVisible: async () => {\n            mark();\n            await finish;\n          }\n        });\n        return p;\n      }\n    };\n    if (direction === 'root') {\n      finish = this.setRoot(id, params, commonOpts);\n    }\n    else {\n      const viewController = this.views.find(v => matches(v, id, params));\n      if (viewController) {\n        finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animationBuilder: animation }));\n      }\n      else if (direction === 'forward') {\n        finish = this.push(id, params, Object.assign(Object.assign({}, commonOpts), { animationBuilder: animation }));\n      }\n      else if (direction === 'back') {\n        finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animated: true, animationBuilder: animation }));\n      }\n    }\n    return promise;\n  }\n  /** @internal */\n  async getRouteId() {\n    const active = this.getActiveSync();\n    return active\n      ? {\n        id: active.element.tagName,\n        params: active.params,\n        element: active.element\n      }\n      : undefined;\n  }\n  /**\n   * Get the active view.\n   */\n  getActive() {\n    return Promise.resolve(this.getActiveSync());\n  }\n  /**\n   * Get the view at the specified index.\n   *\n   * @param index The index of the view.\n   */\n  getByIndex(index) {\n    return Promise.resolve(this.views[index]);\n  }\n  /**\n   * Returns `true` if the current view can go back.\n   *\n   * @param view The view to check.\n   */\n  canGoBack(view) {\n    return Promise.resolve(this.canGoBackSync(view));\n  }\n  /**\n   * Get the previous view.\n   *\n   * @param view The view to get.\n   */\n  getPrevious(view) {\n    return Promise.resolve(this.getPreviousSync(view));\n  }\n  getLength() {\n    return this.views.length;\n  }\n  getActiveSync() {\n    return this.views[this.views.length - 1];\n  }\n  canGoBackSync(view = this.getActiveSync()) {\n    return !!(view && this.getPreviousSync(view));\n  }\n  getPreviousSync(view = this.getActiveSync()) {\n    if (!view) {\n      return undefined;\n    }\n    const views = this.views;\n    const index = views.indexOf(view);\n    return index > 0 ? views[index - 1] : undefined;\n  }\n  // _queueTrns() adds a navigation stack change to the queue and schedules it to run:\n  // 1. _nextTrns(): consumes the next transition in the queue\n  // 2. _viewInit(): initializes enteringView if required\n  // 3. _viewTest(): ensures canLeave/canEnter Returns `true`, so the operation can continue\n  // 4. _postViewInit(): add/remove the views from the navigation stack\n  // 5. _transitionInit(): initializes the visual transition if required and schedules it to run\n  // 6. _viewAttachToDOM(): attaches the enteringView to the DOM\n  // 7. _transitionStart(): called once the transition actually starts, it initializes the Animation underneath.\n  // 8. _transitionFinish(): called once the transition finishes\n  // 9. _cleanup(): syncs the navigation internal state with the DOM. For example it removes the pages from the DOM or hides/show them.\n  async queueTrns(ti, done) {\n    if (this.isTransitioning && ti.opts != null && ti.opts.skipIfBusy) {\n      return Promise.resolve(false);\n    }\n    const promise = new Promise((resolve, reject) => {\n      ti.resolve = resolve;\n      ti.reject = reject;\n    });\n    ti.done = done;\n    /**\n     * If using router, check to see if navigation hooks\n     * will allow us to perform this transition. This\n     * is required in order for hooks to work with\n     * the ion-back-button or swipe to go back.\n     */\n    if (ti.opts && ti.opts.updateURL !== false && this.useRouter) {\n      const router = document.querySelector('ion-router');\n      if (router) {\n        const canTransition = await router.canTransition();\n        if (canTransition === false) {\n          return Promise.resolve(false);\n        }\n        else if (typeof canTransition === 'string') {\n          router.push(canTransition, ti.opts.direction || 'back');\n          return Promise.resolve(false);\n        }\n      }\n    }\n    // Normalize empty\n    if (ti.insertViews && ti.insertViews.length === 0) {\n      ti.insertViews = undefined;\n    }\n    // Enqueue transition instruction\n    this.transInstr.push(ti);\n    // if there isn't a transition already happening\n    // then this will kick off this transition\n    this.nextTrns();\n    return promise;\n  }\n  success(result, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n    if (ti.done) {\n      ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n    }\n    ti.resolve(result.hasCompleted);\n    if (ti.opts.updateURL !== false && this.useRouter) {\n      const router = document.querySelector('ion-router');\n      if (router) {\n        const direction = result.direction === 'back' ? 'back' : 'forward';\n        router.navChanged(direction);\n      }\n    }\n  }\n  failed(rejectReason, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n    this.transInstr.length = 0;\n    this.fireError(rejectReason, ti);\n  }\n  fireError(rejectReason, ti) {\n    if (ti.done) {\n      ti.done(false, false, rejectReason);\n    }\n    if (ti.reject && !this.destroyed) {\n      ti.reject(rejectReason);\n    }\n    else {\n      ti.resolve(false);\n    }\n  }\n  nextTrns() {\n    // this is the framework's bread 'n butta function\n    // only one transition is allowed at any given time\n    if (this.isTransitioning) {\n      return false;\n    }\n    // there is no transition happening right now\n    // get the next instruction\n    const ti = this.transInstr.shift();\n    if (!ti) {\n      return false;\n    }\n    this.runTransition(ti);\n    return true;\n  }\n  async runTransition(ti) {\n    try {\n      // set that this nav is actively transitioning\n      this.ionNavWillChange.emit();\n      this.isTransitioning = true;\n      this.prepareTI(ti);\n      const leavingView = this.getActiveSync();\n      const enteringView = this.getEnteringView(ti, leavingView);\n      if (!leavingView && !enteringView) {\n        throw new Error('no views in the stack to be removed');\n      }\n      if (enteringView && enteringView.state === VIEW_STATE_NEW) {\n        await enteringView.init(this.el);\n      }\n      this.postViewInit(enteringView, leavingView, ti);\n      // Needs transition?\n      const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) &&\n        enteringView !== leavingView;\n      if (requiresTransition && ti.opts && leavingView) {\n        const isBackDirection = ti.opts.direction === 'back';\n        /**\n         * If heading back, use the entering page's animation\n         * unless otherwise specified by the developer.\n         */\n        if (isBackDirection) {\n          ti.opts.animationBuilder = ti.opts.animationBuilder || (enteringView && enteringView.animationBuilder);\n        }\n        leavingView.animationBuilder = ti.opts.animationBuilder;\n      }\n      const result = requiresTransition\n        ? await this.transition(enteringView, leavingView, ti)\n        : {\n          // transition is not required, so we are already done!\n          // they're inserting/removing the views somewhere in the middle or\n          // beginning, so visually nothing needs to animate/transition\n          // resolve immediately because there's no animation that's happening\n          hasCompleted: true,\n          requiresTransition: false\n        };\n      this.success(result, ti);\n      this.ionNavDidChange.emit();\n    }\n    catch (rejectReason) {\n      this.failed(rejectReason, ti);\n    }\n    this.isTransitioning = false;\n    this.nextTrns();\n  }\n  prepareTI(ti) {\n    const viewsLength = this.views.length;\n    ti.opts = ti.opts || {};\n    if (ti.opts.delegate === undefined) {\n      ti.opts.delegate = this.delegate;\n    }\n    if (ti.removeView !== undefined) {\n      assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n      assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n      const index = this.views.indexOf(ti.removeView);\n      if (index < 0) {\n        throw new Error('removeView was not found');\n      }\n      ti.removeStart += index;\n    }\n    if (ti.removeStart !== undefined) {\n      if (ti.removeStart < 0) {\n        ti.removeStart = viewsLength - 1;\n      }\n      if (ti.removeCount < 0) {\n        ti.removeCount = viewsLength - ti.removeStart;\n      }\n      ti.leavingRequiresTransition =\n        ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n    }\n    if (ti.insertViews) {\n      // allow -1 to be passed in to auto push it on the end\n      // and clean up the index if it's larger then the size of the stack\n      if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n        ti.insertStart = viewsLength;\n      }\n      ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n    }\n    const insertViews = ti.insertViews;\n    if (!insertViews) {\n      return;\n    }\n    assert(insertViews.length > 0, 'length can not be zero');\n    const viewControllers = convertToViews(insertViews);\n    if (viewControllers.length === 0) {\n      throw new Error('invalid views to insert');\n    }\n    // Check all the inserted view are correct\n    for (const view of viewControllers) {\n      view.delegate = ti.opts.delegate;\n      const nav = view.nav;\n      if (nav && nav !== this) {\n        throw new Error('inserted view was already inserted');\n      }\n      if (view.state === VIEW_STATE_DESTROYED) {\n        throw new Error('inserted view was already destroyed');\n      }\n    }\n    ti.insertViews = viewControllers;\n  }\n  getEnteringView(ti, leavingView) {\n    const insertViews = ti.insertViews;\n    if (insertViews !== undefined) {\n      // grab the very last view of the views to be inserted\n      // and initialize it as the new entering view\n      return insertViews[insertViews.length - 1];\n    }\n    const removeStart = ti.removeStart;\n    if (removeStart !== undefined) {\n      const views = this.views;\n      const removeEnd = removeStart + ti.removeCount;\n      for (let i = views.length - 1; i >= 0; i--) {\n        const view = views[i];\n        if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n          return view;\n        }\n      }\n    }\n    return undefined;\n  }\n  postViewInit(enteringView, leavingView, ti) {\n    assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n    assert(ti.resolve, 'resolve must be valid');\n    assert(ti.reject, 'reject must be valid');\n    const opts = ti.opts;\n    const insertViews = ti.insertViews;\n    const removeStart = ti.removeStart;\n    const removeCount = ti.removeCount;\n    let destroyQueue;\n    // there are views to remove\n    if (removeStart !== undefined && removeCount !== undefined) {\n      assert(removeStart >= 0, 'removeStart can not be negative');\n      assert(removeCount >= 0, 'removeCount can not be negative');\n      destroyQueue = [];\n      for (let i = 0; i < removeCount; i++) {\n        const view = this.views[i + removeStart];\n        if (view && view !== enteringView && view !== leavingView) {\n          destroyQueue.push(view);\n        }\n      }\n      // default the direction to \"back\"\n      opts.direction = opts.direction || 'back';\n    }\n    const finalBalance = this.views.length +\n      (insertViews !== undefined ? insertViews.length : 0) -\n      (removeCount !== undefined ? removeCount : 0);\n    assert(finalBalance >= 0, 'final balance can not be negative');\n    if (finalBalance === 0) {\n      console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\n      throw new Error('navigation stack needs at least one root page');\n    }\n    // At this point the transition can not be rejected, any throw should be an error\n    // there are views to insert\n    if (insertViews) {\n      // add the views to the\n      let insertIndex = ti.insertStart;\n      for (const view of insertViews) {\n        this.insertViewAt(view, insertIndex);\n        insertIndex++;\n      }\n      if (ti.enteringRequiresTransition) {\n        // default to forward if not already set\n        opts.direction = opts.direction || 'forward';\n      }\n    }\n    // if the views to be removed are in the beginning or middle\n    // and there is not a view that needs to visually transition out\n    // then just destroy them and don't transition anything\n    // batch all of lifecycles together\n    // let's make sure, callbacks are zoned\n    if (destroyQueue && destroyQueue.length > 0) {\n      for (const view of destroyQueue) {\n        lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\n        lifecycle(view.element, LIFECYCLE_DID_LEAVE);\n        lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      }\n      // once all lifecycle events has been delivered, we can safely detroy the views\n      for (const view of destroyQueue) {\n        this.destroyView(view);\n      }\n    }\n  }\n  async transition(enteringView, leavingView, ti) {\n    // we should animate (duration > 0) if the pushed page is not the first one (startup)\n    // or if it is a portal (modal, actionsheet, etc.)\n    const opts = ti.opts;\n    const progressCallback = opts.progressAnimation\n      ? (ani) => this.sbAni = ani\n      : undefined;\n    const mode = getIonMode(this);\n    const enteringEl = enteringView.element;\n    const leavingEl = leavingView && leavingView.element;\n    const animationOpts = Object.assign(Object.assign({ mode, showGoBack: this.canGoBackSync(enteringView), baseEl: this.el, progressCallback, animated: this.animated && config.getBoolean('animated', true), enteringEl,\n      leavingEl }, opts), { animationBuilder: opts.animationBuilder || this.animation || config.get('navAnimation') });\n    const { hasCompleted } = await transition(animationOpts);\n    return this.transitionFinish(hasCompleted, enteringView, leavingView, opts);\n  }\n  transitionFinish(hasCompleted, enteringView, leavingView, opts) {\n    const cleanupView = hasCompleted ? enteringView : leavingView;\n    if (cleanupView) {\n      this.cleanup(cleanupView);\n    }\n    return {\n      hasCompleted,\n      requiresTransition: true,\n      enteringView,\n      leavingView,\n      direction: opts.direction\n    };\n  }\n  insertViewAt(view, index) {\n    const views = this.views;\n    const existingIndex = views.indexOf(view);\n    if (existingIndex > -1) {\n      // this view is already in the stack!!\n      // move it to its new location\n      assert(view.nav === this, 'view is not part of the nav');\n      views.splice(index, 0, views.splice(existingIndex, 1)[0]);\n    }\n    else {\n      assert(!view.nav, 'nav is used');\n      // this is a new view to add to the stack\n      // create the new entering view\n      view.nav = this;\n      // insert the entering view into the correct index in the stack\n      views.splice(index, 0, view);\n    }\n  }\n  removeView(view) {\n    assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n    const views = this.views;\n    const index = views.indexOf(view);\n    assert(index > -1, 'view must be part of the stack');\n    if (index >= 0) {\n      views.splice(index, 1);\n    }\n  }\n  destroyView(view) {\n    view._destroy();\n    this.removeView(view);\n  }\n  /**\n   * DOM WRITE\n   */\n  cleanup(activeView) {\n    // ok, cleanup time!! Destroy all of the views that are\n    // INACTIVE and come after the active view\n    // only do this if the views exist, though\n    if (this.destroyed) {\n      return;\n    }\n    const views = this.views;\n    const activeViewIndex = views.indexOf(activeView);\n    for (let i = views.length - 1; i >= 0; i--) {\n      const view = views[i];\n      /**\n       * When inserting multiple views via insertPages\n       * the last page will be transitioned to, but the\n       * others will not be. As a result, a DOM element\n       * will only be created for the last page inserted.\n       * As a result, it is possible to have views in the\n       * stack that do not have `view.element` yet.\n       */\n      const element = view.element;\n      if (element) {\n        if (i > activeViewIndex) {\n          // this view comes after the active view\n          // let's unload it\n          lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n          this.destroyView(view);\n        }\n        else if (i < activeViewIndex) {\n          // this view comes before the active view\n          // and it is not a portal then ensure it is hidden\n          setPageHidden(element, true);\n        }\n      }\n    }\n  }\n  canStart() {\n    return (!!this.swipeGesture &&\n      !this.isTransitioning &&\n      this.transInstr.length === 0 &&\n      this.animationEnabled &&\n      this.canGoBackSync());\n  }\n  onStart() {\n    this.queueTrns({\n      removeStart: -1,\n      removeCount: 1,\n      opts: {\n        direction: 'back',\n        progressAnimation: true\n      }\n    }, undefined);\n  }\n  onMove(stepValue) {\n    if (this.sbAni) {\n      this.sbAni.progressStep(stepValue);\n    }\n  }\n  onEnd(shouldComplete, stepValue, dur) {\n    if (this.sbAni) {\n      this.animationEnabled = false;\n      this.sbAni.onFinish(() => {\n        this.animationEnabled = true;\n      }, { oneTimeCallback: true });\n      // Account for rounding errors in JS\n      let newStepValue = (shouldComplete) ? -0.001 : 0.001;\n      /**\n       * Animation will be reversed here, so need to\n       * reverse the easing curve as well\n       *\n       * Additionally, we need to account for the time relative\n       * to the new easing curve, as `stepValue` is going to be given\n       * in terms of a linear curve.\n       */\n      if (!shouldComplete) {\n        this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n        newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\n      }\n      else {\n        newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\n      }\n      this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n    }\n  }\n  render() {\n    return (h(\"slot\", null));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"swipeGesture\": [\"swipeGestureChanged\"],\n    \"root\": [\"rootChanged\"]\n  }; }\n};\nNav.style = navCss;\n\nconst navLink = (el, routerDirection, component, componentProps, routerAnimation) => {\n  const nav = el.closest('ion-nav');\n  if (nav) {\n    if (routerDirection === 'forward') {\n      if (component !== undefined) {\n        return nav.push(component, componentProps, { skipIfBusy: true, animationBuilder: routerAnimation });\n      }\n    }\n    else if (routerDirection === 'root') {\n      if (component !== undefined) {\n        return nav.setRoot(component, componentProps, { skipIfBusy: true, animationBuilder: routerAnimation });\n      }\n    }\n    else if (routerDirection === 'back') {\n      return nav.pop({ skipIfBusy: true, animationBuilder: routerAnimation });\n    }\n  }\n  return Promise.resolve(false);\n};\n\nconst NavLink = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * The transition direction when navigating to another page.\n     */\n    this.routerDirection = 'forward';\n    this.onClick = () => {\n      return navLink(this.el, this.routerDirection, this.component, this.componentProps, this.routerAnimation);\n    };\n  }\n  render() {\n    return (h(Host, { onClick: this.onClick }));\n  }\n  get el() { return getElement(this); }\n};\n\nexport { Nav as ion_nav, NavLink as ion_nav_link };\n"],"sourceRoot":"webpack:///","file":"21-es5.js"}