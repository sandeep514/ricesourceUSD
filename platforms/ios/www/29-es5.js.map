{"version":3,"sources":["node_modules/@ionic/core/dist/esm/ion-route_4.entry.js"],"names":[],"mappings":"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","sourcesContent":["import { r as registerInstance, e as createEvent, i as getElement, h, H as Host } from './index-7a8b7a1c.js';\nimport { c as componentOnReady, o as debounce } from './helpers-1457892a.js';\nimport { b as getIonMode } from './ionic-global-63a97a32.js';\nimport { o as openURL, c as createColorClasses } from './theme-ff3fc52f.js';\n\nconst Route = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteDataChanged = createEvent(this, \"ionRouteDataChanged\", 7);\n    /**\n     * Relative path that needs to match in order for this route to apply.\n     *\n     * Accepts paths similar to expressjs so that you can define parameters\n     * in the url /foo/:bar where bar would be available in incoming props.\n     */\n    this.url = '';\n  }\n  onUpdate(newValue) {\n    this.ionRouteDataChanged.emit(newValue);\n  }\n  onComponentProps(newValue, oldValue) {\n    if (newValue === oldValue) {\n      return;\n    }\n    const keys1 = newValue ? Object.keys(newValue) : [];\n    const keys2 = oldValue ? Object.keys(oldValue) : [];\n    if (keys1.length !== keys2.length) {\n      this.onUpdate(newValue);\n      return;\n    }\n    for (const key of keys1) {\n      if (newValue[key] !== oldValue[key]) {\n        this.onUpdate(newValue);\n        return;\n      }\n    }\n  }\n  connectedCallback() {\n    this.ionRouteDataChanged.emit();\n  }\n  static get watchers() { return {\n    \"url\": [\"onUpdate\"],\n    \"component\": [\"onUpdate\"],\n    \"componentProps\": [\"onComponentProps\"]\n  }; }\n};\n\nconst RouteRedirect = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteRedirectChanged = createEvent(this, \"ionRouteRedirectChanged\", 7);\n  }\n  propDidChange() {\n    this.ionRouteRedirectChanged.emit();\n  }\n  connectedCallback() {\n    this.ionRouteRedirectChanged.emit();\n  }\n  static get watchers() { return {\n    \"from\": [\"propDidChange\"],\n    \"to\": [\"propDidChange\"]\n  }; }\n};\n\nconst ROUTER_INTENT_NONE = 'root';\nconst ROUTER_INTENT_FORWARD = 'forward';\nconst ROUTER_INTENT_BACK = 'back';\n\n// Join the non empty segments with \"/\".\nconst generatePath = (segments) => {\n  const path = segments\n    .filter(s => s.length > 0)\n    .join('/');\n  return '/' + path;\n};\nconst generateUrl = (segments, useHash, queryString) => {\n  let url = generatePath(segments);\n  if (useHash) {\n    url = '#' + url;\n  }\n  if (queryString !== undefined) {\n    url += '?' + queryString;\n  }\n  return url;\n};\nconst writePath = (history, root, useHash, path, direction, state, queryString) => {\n  const url = generateUrl([...parsePath(root).segments, ...path], useHash, queryString);\n  if (direction === ROUTER_INTENT_FORWARD) {\n    history.pushState(state, '', url);\n  }\n  else {\n    history.replaceState(state, '', url);\n  }\n};\nconst chainToPath = (chain) => {\n  const path = [];\n  for (const route of chain) {\n    for (const segment of route.path) {\n      if (segment[0] === ':') {\n        const param = route.params && route.params[segment.slice(1)];\n        if (!param) {\n          return null;\n        }\n        path.push(param);\n      }\n      else if (segment !== '') {\n        path.push(segment);\n      }\n    }\n  }\n  return path;\n};\n// Remove the prefix segments from the path segments.\n//\n// Return:\n// - null when the path segments do not start with the passed prefix,\n// - the path segments after the prefix otherwise.\nconst removePrefix = (prefix, path) => {\n  if (prefix.length > path.length) {\n    return null;\n  }\n  if (prefix.length <= 1 && prefix[0] === '') {\n    return path;\n  }\n  for (let i = 0; i < prefix.length; i++) {\n    if (prefix[i] !== path[i]) {\n      return null;\n    }\n  }\n  if (path.length === prefix.length) {\n    return [''];\n  }\n  return path.slice(prefix.length);\n};\nconst readPath = (loc, root, useHash) => {\n  const prefix = parsePath(root).segments;\n  const pathname = useHash ? loc.hash.slice(1) : loc.pathname;\n  const path = parsePath(pathname).segments;\n  return removePrefix(prefix, path);\n};\n// Parses the path to:\n// - segments an array of '/' separated parts,\n// - queryString (undefined when no query string).\nconst parsePath = (path) => {\n  let segments = [''];\n  let queryString;\n  if (path != null) {\n    const qsStart = path.indexOf('?');\n    if (qsStart > -1) {\n      queryString = path.substr(qsStart + 1);\n      path = path.substr(0, qsStart);\n    }\n    segments = path.split('/')\n      .map(s => s.trim())\n      .filter(s => s.length > 0);\n    if (segments.length === 0) {\n      segments = [''];\n    }\n  }\n  return { segments, queryString };\n};\n\nconst printRoutes = (routes) => {\n  console.group(`[ion-core] ROUTES[${routes.length}]`);\n  for (const chain of routes) {\n    const path = [];\n    chain.forEach(r => path.push(...r.path));\n    const ids = chain.map(r => r.id);\n    console.debug(`%c ${generatePath(path)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\n  }\n  console.groupEnd();\n};\nconst printRedirects = (redirects) => {\n  console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\n  for (const redirect of redirects) {\n    if (redirect.to) {\n      console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to.segments)}`, 'font-weight: bold');\n    }\n  }\n  console.groupEnd();\n};\n\nconst writeNavState = async (root, chain, direction, index, changed = false, animation) => {\n  try {\n    // find next navigation outlet in the DOM\n    const outlet = searchNavNode(root);\n    // make sure we can continue interacting the DOM, otherwise abort\n    if (index >= chain.length || !outlet) {\n      return changed;\n    }\n    await new Promise(resolve => componentOnReady(outlet, resolve));\n    const route = chain[index];\n    const result = await outlet.setRouteId(route.id, route.params, direction, animation);\n    // if the outlet changed the page, reset navigation to neutral (no direction)\n    // this means nested outlets will not animate\n    if (result.changed) {\n      direction = ROUTER_INTENT_NONE;\n      changed = true;\n    }\n    // recursively set nested outlets\n    changed = await writeNavState(result.element, chain, direction, index + 1, changed, animation);\n    // once all nested outlets are visible let's make the parent visible too,\n    // using markVisible prevents flickering\n    if (result.markVisible) {\n      await result.markVisible();\n    }\n    return changed;\n  }\n  catch (e) {\n    console.error(e);\n    return false;\n  }\n};\nconst readNavState = async (root) => {\n  const ids = [];\n  let outlet;\n  let node = root;\n  // tslint:disable-next-line:no-constant-condition\n  while (true) {\n    outlet = searchNavNode(node);\n    if (outlet) {\n      const id = await outlet.getRouteId();\n      if (id) {\n        node = id.element;\n        id.element = undefined;\n        ids.push(id);\n      }\n      else {\n        break;\n      }\n    }\n    else {\n      break;\n    }\n  }\n  return { ids, outlet };\n};\nconst waitUntilNavNode = () => {\n  if (searchNavNode(document.body)) {\n    return Promise.resolve();\n  }\n  return new Promise(resolve => {\n    window.addEventListener('ionNavWillLoad', resolve, { once: true });\n  });\n};\nconst QUERY = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\nconst searchNavNode = (root) => {\n  if (!root) {\n    return undefined;\n  }\n  if (root.matches(QUERY)) {\n    return root;\n  }\n  const outlet = root.querySelector(QUERY);\n  return outlet !== null && outlet !== void 0 ? outlet : undefined;\n};\n\n// Returns whether the given redirect matches the given path segments.\n//\n// A redirect matches when the segments of the path and redirect.from are equal.\n// Note that segments are only checked until redirect.from contains a '*' which matches any path segment.\n// The path ['some', 'path', 'to', 'page'] matches both ['some', 'path', 'to', 'page'] and ['some', 'path', '*'].\nconst matchesRedirect = (path, redirect) => {\n  const { from, to } = redirect;\n  if (to === undefined) {\n    return false;\n  }\n  if (from.length > path.length) {\n    return false;\n  }\n  for (let i = 0; i < from.length; i++) {\n    const expected = from[i];\n    if (expected === '*') {\n      return true;\n    }\n    if (expected !== path[i]) {\n      return false;\n    }\n  }\n  return from.length === path.length;\n};\n// Returns the first redirect matching the path segments or undefined when no match found.\nconst findRouteRedirect = (path, redirects) => {\n  return redirects.find(redirect => matchesRedirect(path, redirect));\n};\nconst matchesIDs = (ids, chain) => {\n  const len = Math.min(ids.length, chain.length);\n  let score = 0;\n  for (let i = 0; i < len; i++) {\n    const routeId = ids[i];\n    const routeChain = chain[i];\n    // Skip results where the route id does not match the chain at the same index\n    if (routeId.id.toLowerCase() !== routeChain.id) {\n      break;\n    }\n    if (routeId.params) {\n      const routeIdParams = Object.keys(routeId.params);\n      /**\n       * Only compare routes with the chain that have the same number of parameters.\n       */\n      if (routeIdParams.length === routeChain.path.length) {\n        /**\n         * Maps the route's params into a path based on the path variable names,\n         * to compare against the route chain format.\n         *\n         * Before:\n         * ```ts\n         * {\n         *  params: {\n         *    s1: 'a',\n         *    s2: 'b'\n         *  }\n         * }\n         * ```\n         *\n         * After:\n         * ```ts\n         * [':s1',':s2']\n         * ```\n         */\n        const pathWithParams = routeIdParams.map(key => `:${key}`);\n        for (let j = 0; j < pathWithParams.length; j++) {\n          // Skip results where the path variable is not a match\n          if (pathWithParams[j].toLowerCase() !== routeChain.path[j]) {\n            break;\n          }\n          // Weight path matches for the same index higher.\n          score++;\n        }\n      }\n    }\n    // Weight id matches\n    score++;\n  }\n  return score;\n};\nconst matchesPath = (inputPath, chain) => {\n  const segments = new RouterSegments(inputPath);\n  let matchesDefault = false;\n  let allparams;\n  for (let i = 0; i < chain.length; i++) {\n    const path = chain[i].path;\n    if (path[0] === '') {\n      matchesDefault = true;\n    }\n    else {\n      for (const segment of path) {\n        const data = segments.next();\n        // data param\n        if (segment[0] === ':') {\n          if (data === '') {\n            return null;\n          }\n          allparams = allparams || [];\n          const params = allparams[i] || (allparams[i] = {});\n          params[segment.slice(1)] = data;\n        }\n        else if (data !== segment) {\n          return null;\n        }\n      }\n      matchesDefault = false;\n    }\n  }\n  const matches = (matchesDefault)\n    ? matchesDefault === (segments.next() === '')\n    : true;\n  if (!matches) {\n    return null;\n  }\n  if (allparams) {\n    return chain.map((route, i) => ({\n      id: route.id,\n      path: route.path,\n      params: mergeParams(route.params, allparams[i]),\n      beforeEnter: route.beforeEnter,\n      beforeLeave: route.beforeLeave\n    }));\n  }\n  return chain;\n};\n// Merges the route parameter objects.\n// Returns undefined when both parameters are undefined.\nconst mergeParams = (a, b) => {\n  return a || b ? Object.assign(Object.assign({}, a), b) : undefined;\n};\nconst routerIDsToChain = (ids, chains) => {\n  let match = null;\n  let maxMatches = 0;\n  for (const chain of chains) {\n    const score = matchesIDs(ids, chain);\n    if (score > maxMatches) {\n      match = chain;\n      maxMatches = score;\n    }\n  }\n  if (match) {\n    return match.map((route, i) => ({\n      id: route.id,\n      path: route.path,\n      params: mergeParams(route.params, ids[i] && ids[i].params)\n    }));\n  }\n  return null;\n};\nconst routerPathToChain = (path, chains) => {\n  let match = null;\n  let matches = 0;\n  for (const chain of chains) {\n    const matchedChain = matchesPath(path, chain);\n    if (matchedChain !== null) {\n      const score = computePriority(matchedChain);\n      if (score > matches) {\n        matches = score;\n        match = matchedChain;\n      }\n    }\n  }\n  return match;\n};\nconst computePriority = (chain) => {\n  let score = 1;\n  let level = 1;\n  for (const route of chain) {\n    for (const path of route.path) {\n      if (path[0] === ':') {\n        score += Math.pow(1, level);\n      }\n      else if (path !== '') {\n        score += Math.pow(2, level);\n      }\n      level++;\n    }\n  }\n  return score;\n};\nclass RouterSegments {\n  constructor(path) {\n    this.path = path.slice();\n  }\n  next() {\n    if (this.path.length > 0) {\n      return this.path.shift();\n    }\n    return '';\n  }\n}\n\nconst readProp = (el, prop) => {\n  if (prop in el) {\n    return el[prop];\n  }\n  if (el.hasAttribute(prop)) {\n    return el.getAttribute(prop);\n  }\n  return null;\n};\nconst readRedirects = (root) => {\n  return Array.from(root.children)\n    .filter(el => el.tagName === 'ION-ROUTE-REDIRECT')\n    .map(el => {\n    const to = readProp(el, 'to');\n    return {\n      from: parsePath(readProp(el, 'from')).segments,\n      to: to == null ? undefined : parsePath(to),\n    };\n  });\n};\nconst readRoutes = (root) => {\n  return flattenRouterTree(readRouteNodes(root));\n};\nconst readRouteNodes = (node) => {\n  return Array.from(node.children)\n    .filter(el => el.tagName === 'ION-ROUTE' && el.component)\n    .map(el => {\n    const component = readProp(el, 'component');\n    return {\n      path: parsePath(readProp(el, 'url')).segments,\n      id: component.toLowerCase(),\n      params: el.componentProps,\n      beforeLeave: el.beforeLeave,\n      beforeEnter: el.beforeEnter,\n      children: readRouteNodes(el)\n    };\n  });\n};\nconst flattenRouterTree = (nodes) => {\n  const chains = [];\n  for (const node of nodes) {\n    flattenNode([], chains, node);\n  }\n  return chains;\n};\nconst flattenNode = (chain, chains, node) => {\n  chain = chain.slice();\n  chain.push({\n    id: node.id,\n    path: node.path,\n    params: node.params,\n    beforeLeave: node.beforeLeave,\n    beforeEnter: node.beforeEnter\n  });\n  if (node.children.length === 0) {\n    chains.push(chain);\n    return;\n  }\n  for (const child of node.children) {\n    flattenNode(chain, chains, child);\n  }\n};\n\nconst Router = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteWillChange = createEvent(this, \"ionRouteWillChange\", 7);\n    this.ionRouteDidChange = createEvent(this, \"ionRouteDidChange\", 7);\n    this.previousPath = null;\n    this.busy = false;\n    this.state = 0;\n    this.lastState = 0;\n    /**\n     * The root path to use when matching URLs. By default, this is set to \"/\", but you can specify\n     * an alternate prefix for all URL paths.\n     */\n    this.root = '/';\n    /**\n     * The router can work in two \"modes\":\n     * - With hash: `/index.html#/path/to/page`\n     * - Without hash: `/path/to/page`\n     *\n     * Using one or another might depend in the requirements of your app and/or where it's deployed.\n     *\n     * Usually \"hash-less\" navigation works better for SEO and it's more user friendly too, but it might\n     * requires additional server-side configuration in order to properly work.\n     *\n     * On the other side hash-navigation is much easier to deploy, it even works over the file protocol.\n     *\n     * By default, this property is `true`, change to `false` to allow hash-less URLs.\n     */\n    this.useHash = true;\n  }\n  async componentWillLoad() {\n    await waitUntilNavNode();\n    const canProceed = await this.runGuards(this.getPath());\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        const { redirect } = canProceed;\n        const path = parsePath(redirect);\n        this.setPath(path.segments, ROUTER_INTENT_NONE, path.queryString);\n        await this.writeNavStateRoot(path.segments, ROUTER_INTENT_NONE);\n      }\n    }\n    else {\n      await this.onRoutesChanged();\n    }\n  }\n  componentDidLoad() {\n    window.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\n    window.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\n  }\n  async onPopState() {\n    const direction = this.historyDirection();\n    let segments = this.getPath();\n    const canProceed = await this.runGuards(segments);\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        segments = parsePath(canProceed.redirect).segments;\n      }\n      else {\n        return false;\n      }\n    }\n    return this.writeNavStateRoot(segments, direction);\n  }\n  onBackButton(ev) {\n    ev.detail.register(0, processNextHandler => {\n      this.back();\n      processNextHandler();\n    });\n  }\n  /** @internal */\n  async canTransition() {\n    const canProceed = await this.runGuards();\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        return canProceed.redirect;\n      }\n      else {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Navigate to the specified URL.\n   *\n   * @param url The url to navigate to.\n   * @param direction The direction of the animation. Defaults to `\"forward\"`.\n   */\n  async push(url, direction = 'forward', animation) {\n    if (url.startsWith('.')) {\n      url = (new URL(url, window.location.href)).pathname;\n    }\n    let parsedPath = parsePath(url);\n    const canProceed = await this.runGuards(parsedPath.segments);\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        parsedPath = parsePath(canProceed.redirect);\n      }\n      else {\n        return false;\n      }\n    }\n    this.setPath(parsedPath.segments, direction, parsedPath.queryString);\n    return this.writeNavStateRoot(parsedPath.segments, direction, animation);\n  }\n  /**\n   * Go back to previous page in the window.history.\n   */\n  back() {\n    window.history.back();\n    return Promise.resolve(this.waitPromise);\n  }\n  /** @internal */\n  async printDebug() {\n    printRoutes(readRoutes(this.el));\n    printRedirects(readRedirects(this.el));\n  }\n  /** @internal */\n  async navChanged(direction) {\n    if (this.busy) {\n      console.warn('[ion-router] router is busy, navChanged was cancelled');\n      return false;\n    }\n    const { ids, outlet } = await readNavState(window.document.body);\n    const routes = readRoutes(this.el);\n    const chain = routerIDsToChain(ids, routes);\n    if (!chain) {\n      console.warn('[ion-router] no matching URL for ', ids.map(i => i.id));\n      return false;\n    }\n    const path = chainToPath(chain);\n    if (!path) {\n      console.warn('[ion-router] router could not match path because some required param is missing');\n      return false;\n    }\n    this.setPath(path, direction);\n    await this.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, path, null, ids.length);\n    return true;\n  }\n  // This handler gets called when a `ion-route-redirect` component is added to the DOM or if the from or to property of such node changes.\n  onRedirectChanged() {\n    const path = this.getPath();\n    if (path && findRouteRedirect(path, readRedirects(this.el))) {\n      this.writeNavStateRoot(path, ROUTER_INTENT_NONE);\n    }\n  }\n  // This handler gets called when a `ion-route` component is added to the DOM or if the from or to property of such node changes.\n  onRoutesChanged() {\n    return this.writeNavStateRoot(this.getPath(), ROUTER_INTENT_NONE);\n  }\n  historyDirection() {\n    var _a;\n    const win = window;\n    if (win.history.state === null) {\n      this.state++;\n      win.history.replaceState(this.state, win.document.title, (_a = win.document.location) === null || _a === void 0 ? void 0 : _a.href);\n    }\n    const state = win.history.state;\n    const lastState = this.lastState;\n    this.lastState = state;\n    if (state > lastState || (state >= lastState && lastState > 0)) {\n      return ROUTER_INTENT_FORWARD;\n    }\n    if (state < lastState) {\n      return ROUTER_INTENT_BACK;\n    }\n    return ROUTER_INTENT_NONE;\n  }\n  async writeNavStateRoot(path, direction, animation) {\n    if (!path) {\n      console.error('[ion-router] URL is not part of the routing set');\n      return false;\n    }\n    // lookup redirect rule\n    const redirects = readRedirects(this.el);\n    const redirect = findRouteRedirect(path, redirects);\n    let redirectFrom = null;\n    if (redirect) {\n      const { segments, queryString } = redirect.to;\n      this.setPath(segments, direction, queryString);\n      redirectFrom = redirect.from;\n      path = segments;\n    }\n    // lookup route chain\n    const routes = readRoutes(this.el);\n    const chain = routerPathToChain(path, routes);\n    if (!chain) {\n      console.error('[ion-router] the path does not match any route');\n      return false;\n    }\n    // write DOM give\n    return this.safeWriteNavState(document.body, chain, direction, path, redirectFrom, 0, animation);\n  }\n  async safeWriteNavState(node, chain, direction, path, redirectFrom, index = 0, animation) {\n    const unlock = await this.lock();\n    let changed = false;\n    try {\n      changed = await this.writeNavState(node, chain, direction, path, redirectFrom, index, animation);\n    }\n    catch (e) {\n      console.error(e);\n    }\n    unlock();\n    return changed;\n  }\n  async lock() {\n    const p = this.waitPromise;\n    let resolve;\n    this.waitPromise = new Promise(r => resolve = r);\n    if (p !== undefined) {\n      await p;\n    }\n    return resolve;\n  }\n  // Executes the beforeLeave hook of the source route and the beforeEnter hook of the target route if they exist.\n  //\n  // When the beforeLeave hook does not return true (to allow navigating) then that value is returned early and the beforeEnter is executed.\n  // Otherwise the beforeEnterHook hook of the target route is executed.\n  async runGuards(to = this.getPath(), from) {\n    if (from === undefined) {\n      from = parsePath(this.previousPath).segments;\n    }\n    if (!to || !from) {\n      return true;\n    }\n    const routes = readRoutes(this.el);\n    const fromChain = routerPathToChain(from, routes);\n    const beforeLeaveHook = fromChain && fromChain[fromChain.length - 1].beforeLeave;\n    const canLeave = beforeLeaveHook ? await beforeLeaveHook() : true;\n    if (canLeave === false || typeof canLeave === 'object') {\n      return canLeave;\n    }\n    const toChain = routerPathToChain(to, routes);\n    const beforeEnterHook = toChain && toChain[toChain.length - 1].beforeEnter;\n    return beforeEnterHook ? beforeEnterHook() : true;\n  }\n  async writeNavState(node, chain, direction, path, redirectFrom, index = 0, animation) {\n    if (this.busy) {\n      console.warn('[ion-router] router is busy, transition was cancelled');\n      return false;\n    }\n    this.busy = true;\n    // generate route event and emit will change\n    const routeEvent = this.routeChangeEvent(path, redirectFrom);\n    if (routeEvent) {\n      this.ionRouteWillChange.emit(routeEvent);\n    }\n    const changed = await writeNavState(node, chain, direction, index, false, animation);\n    this.busy = false;\n    // emit did change\n    if (routeEvent) {\n      this.ionRouteDidChange.emit(routeEvent);\n    }\n    return changed;\n  }\n  setPath(path, direction, queryString) {\n    this.state++;\n    writePath(window.history, this.root, this.useHash, path, direction, this.state, queryString);\n  }\n  getPath() {\n    return readPath(window.location, this.root, this.useHash);\n  }\n  routeChangeEvent(path, redirectFromPath) {\n    const from = this.previousPath;\n    const to = generatePath(path);\n    this.previousPath = to;\n    if (to === from) {\n      return null;\n    }\n    const redirectedFrom = redirectFromPath ? generatePath(redirectFromPath) : null;\n    return {\n      from,\n      redirectedFrom,\n      to,\n    };\n  }\n  get el() { return getElement(this); }\n};\n\nconst routerLinkCss = \":host{--background:transparent;--color:var(--ion-color-primary, #3880ff);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\";\n\nconst RouterLink = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * When using a router, it specifies the transition direction when navigating to\n     * another page using `href`.\n     */\n    this.routerDirection = 'forward';\n    this.onClick = (ev) => {\n      openURL(this.href, ev, this.routerDirection, this.routerAnimation);\n    };\n  }\n  render() {\n    const mode = getIonMode(this);\n    const attrs = {\n      href: this.href,\n      rel: this.rel,\n      target: this.target\n    };\n    return (h(Host, { onClick: this.onClick, class: createColorClasses(this.color, {\n        [mode]: true,\n        'ion-activatable': true\n      }) }, h(\"a\", Object.assign({}, attrs), h(\"slot\", null))));\n  }\n};\nRouterLink.style = routerLinkCss;\n\nexport { Route as ion_route, RouteRedirect as ion_route_redirect, Router as ion_router, RouterLink as ion_router_link };\n"],"sourceRoot":"webpack:///","file":"29-es5.js"}